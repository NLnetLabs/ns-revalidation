<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.17 (Ruby 3.2.3) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC1034 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC8109 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8109.xml">
<!ENTITY I-D.vixie-dnsext-resimprove SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.vixie-dnsext-resimprove.xml">
<!ENTITY I-D.wijngaards-dnsext-resolver-side-mitigation SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.wijngaards-dnsext-resolver-side-mitigation.xml">
]>


<rfc ipr="trust200902" docName="draft-ietf-dnsop-ns-revalidation-07" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="DNS Delegation Revalidation">Delegation Revalidation by DNS Resolvers</title>

    <author initials="S." surname="Huque" fullname="Shumon Huque">
      <organization>Salesforce</organization>
      <address>
        <email>shuque@gmail.com</email>
      </address>
    </author>
    <author initials="P." surname="Vixie" fullname="Paul Vixie">
      <organization>SIE Europe, U.G.</organization>
      <address>
        <email>paul@redbarn.org</email>
      </address>
    </author>
    <author initials="W." surname="Toorop" fullname="Willem Toorop">
      <organization>NLnet Labs</organization>
      <address>
        <postal>
          <street>Science Park 400</street>
          <city>Amsterdam</city>
          <code>1098 XH</code>
          <country>Netherlands</country>
        </postal>
        <email>willem@nlnetlabs.nl</email>
      </address>
    </author>

    <date year="2024" month="June" day="24"/>

    <area>Operations and Management Area</area>
    <workgroup>Domain Name System Operations</workgroup>
    <keyword>Internet-Draft</keyword> <keyword>DNS</keyword> <keyword>Resolver</keyword> <keyword>Delegation</keyword> <keyword>Revalidation</keyword> <keyword>Authoritative</keyword> <keyword>Name Server Record</keyword> <keyword>NS</keyword> <keyword>Parent</keyword> <keyword>Child</keyword> <keyword>Resource Record Set</keyword>

    <abstract>


<?line 125?>

<t>This document recommends improved DNS <xref target="RFC1034"/> <xref target="RFC1035"/> resolver behavior with respect to the processing of Name Server (NS) resource record sets (RRset) during iterative resolution.
When following a referral response from an authoritative server to a child zone, DNS resolvers should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
The (A and AAAA) address RRsets in the additional section from referral responses and authoritative NS answers for the names of the NS RRset, should similarly be re-queried and used to replace the entries with the lower trustworthiness ranking in cache.
Resolvers should also periodically revalidate the child delegation by re-querying the parent zone at the expiration of the TTL of the parent side NS RRset.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-dnsop-ns-revalidation/"/>.
      </t>
      <t>
        Discussion of this document takes place on the
        DNSOP Working Group mailing list (<eref target="mailto:dnsop@ietf.org"/>),
        which is archived at <eref target="https://mailarchive.ietf.org/arch/browse/dnsop/"/>.
        Subscribe at <eref target="https://www.ietf.org/mailman/listinfo/dnsop/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/shuque/ns-revalidation"/>.</t>
    </note>


  </front>

  <middle>


<?line 132?>

<section anchor="into"><name>Introduction</name>

<t>This document recommends improved DNS resolver behavior with respect to the processing of NS record sets during iterative resolution.
The first recommendation is that resolvers, when following a referral response from an authoritative server to a child zone, should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
The address records in the additional section from the referral response (as glue) or authoritative NS response that match the names of the NS RRset should similarly be required if they are cached non-authoritatively.
The authoritative answers from those queries should replace the cached non-authoritative A and AAAA RRsets.
The second recommendation is to revalidate the delegation by re-querying the parent zone at the expiration of the TTL of the parent side NS RRset.</t>

</section>
<section anchor="motivation"><name>Motivation</name>

<t>There is wide variability in the behavior of deployed DNS resolvers today with respect to how they process delegation records.
Some of them prefer the parent NS set, some prefer the child, and for others, what they preferentially cache depends on the dynamic state of queries and responses they have processed.
This document aims to bring more commonality and predictability by standardizing the behavior in a way that comports with the DNS protocol.
Another goal is to improve DNS security.</t>

<t>The delegation NS RRset at the bottom of the parent zone and the apex NS RRset in the child zone are unsynchronized in the DNS protocol.
<xref target="RFC1034"/> Section 4.2.2 says "The administrators of both zones should insure that the NS and glue RRs which mark both sides of the cut are consistent and remain so.".
But for a variety of reasons they could not be.
Officially, a child zone's apex NS RRset is authoritative and thus has a higher cache credibility than the parent's delegation NS RRset, which is non-authoritative glue <xref target="RFC2181"/>, Section 5.4.1. "Ranking data", and Section 6.1. "Zone authority").
Hence the NS RRset "below the zone cut" should immediately replace the parent's delegating NS RRset in cache when an iterative caching DNS resolver crosses a zone boundary.
However, this can only happen if (1) the resolver receives the authoritative NS RRset in the Authority section of a response from the child zone, which is not mandatory, or (2) if the resolver explicitly issues an NS RRset query to the child zone as part of its iterative resolution algorithm.
In the absence of this, it is possible for an iterative caching resolver to never learn the authoritative NS RRset for a zone, unless a downstream client of the resolver explicitly issues such an NS query, which is not something that normal enduser applications do, and thus cannot be relied upon to occur with any regularity.</t>

<t>Increasingly, there is a trend towards minimizing unnecessary data in DNS responses.
Several popular DNS implementations default to such a configuration (see "minimal-responses" in BIND and NSD).
So, they may never include the authoritative NS RRset in the Authority section of their responses.</t>

<t>A common reason that zone owners want to ensure that resolvers place the authoritative NS RRset preferentially in their cache is that the TTLs may differ between the parent and child side of the zone cut.
Some DNS Top Level Domains (TLDs) only support long fixed TTLs in their delegation NS sets.
This inhibits a child zone owner's ability to make more rapid changes to their nameserver configuration using a shorter TTL, if resolvers have no systematic mechanism to observe and cache the child NS RRset.</t>

<t>Similarly, a child zone owner may also choose to have longer TTLs in their delegation NS sets and address records to decrease the attack window for cache poisoning attacks.
For example, at the time of writing, root-servers.net has a TTL of 6 weeks for the root server identifier address records, where the TTL in the priming response is 6 days.</t>

<t>A child zone's delegation still needs to be periodically revalidated at the parent to make sure that the parent zone has not legitimately re-delegated the zone to a different set of nameservers, or even removed the delegation.
Otherwise, resolvers that refresh the TTL of a child NS RRset on subsequent queries or due to pre-fetching, may cling to those nameservers long after they have been re-delegated elsewhere.
This leads to the second recommendation in this document, "Delegation Revalidation" - Resolvers should record the TTL of the parent's delegating NS RRset, and use it to trigger a revalidation action.
Attacks exploiting lack of this revalidation have been described in <xref target="GHOST1"/>, <xref target="GHOST2"/>.</t>

</section>
<section anchor="upgrade-ns"><name>Upgrading NS RRset Credibility</name>

<t><list style="symbols">
  <t>When a referral response is received during iteration, a validation query should be sent in parallel with the resolution of the triggering query, to the delegated nameservers for the newly discovered zone cut.
Note that validating resolvers today, when following a secure referral, already need to dispatch a query to the delegated nameservers for the DNSKEY RRset, so this validation query could be sent in parallel with that DNSKEY query.</t>
  <t>A validation query consists of a query for the child's apex NS RRset, sent to the newly discovered delegation's nameservers.
Normal iterative logic applies to the processing of responses to validation queries, including storing the results in cache, trying the next server on SERVFAIL or timeout, and so on.
Positive responses to this validation query will be cached with an authoritative data ranking.
Successive queries directed to the same zone will be directed to the nameservers listed in the child's apex, due to the ranking of this answer.
If the validation query fails, the parent NS RRset will remain the one with the highest ranking and will be used for successive queries.</t>
  <t>Additional validation queries for the "glue" resource records of referral responses (if not already authoritatively present in cache) may be sent with the validation query for the NS RRset as well.
Positive responses will be cached authoritatively and replace the non authoritative "glue" entries.
Successive queries directed to the same zone will be directed to the authoritative values for the names of the NS RRset in the referral response.</t>
  <t>The names from the NS RRset from a validating NS query may differ from the names in NS RRset in the referral response.
Outstanding validation queries for "glue" that do not match names in the authoritative NS RRset be discarded, or they may be left running to completion.
Their result will no longer be used in queries for the zone.
Outstanding validation queries for "glue" that do match names in the authoritative NS RRset must be left running to completion.
They do not need to be re-queried after reception of the authoritative NS RRset (see <xref target="upgrade-addresses"></xref>).</t>
  <t>Resolvers may choose to delay the response to the triggering query until both the triggering query and the validation query have been answered.
In practice, we expect many implementations may answer the triggering query in advance of the validation query for performance reasons.
An additional reason is that there are unfortunately a number of nameservers in the field that (incorrectly) fail to properly answer explicit queries for zone apex NS records, and thus the revalidation logic may need to be applied lazily and opportunistically to deal with them.
In cases where the delegated nameservers respond incorrectly to an NS query, the resolver should abandon this algorithm for the zone in question and fall back to using only the information from the parent's referral response.</t>
  <t>If the resolver chooses to delay the response, and there are no nameserver names in common between the child's apex NS RRset and the parent's delegation NS RRset, then the responses received from forwarding the triggering query to the parent's delegated nameservers should be discarded after validation, and this query should be forwarded again to the child's apex nameservers.</t>
</list></t>

</section>
<section anchor="upgrade-addresses"><name>Upgrading A and AAAA RRset Credibility</name>
<t>Authoritative responses for a zone's NS RRset at the apex can contain additional addresses.
A NS RRset validation response is such an example of such responses.
A priming response is another example of an authoritative zone's NS RRset response <xref target="RFC8109"/>.</t>

<t>Additional addresses in authoritative NS RRset responses SHOULD be validated if they are not already authoritatively in cache.
Only when such additional addresses are DNSSEC verifiable, (because the complete RRset is included, including a verifiable signature for the RRset), such additional addresses can be cached authoritatively immediately without additional validation queries.
DNSSEC validation is enough validation in those cases.
Otherwise, the addresses cannot be assumed to be complete or even authoritatively present in the same zone, and additional validation queries SHOULD be made for these addresses.</t>

<t>Note that there may be outstanding address validation queries for the names of the authoritative NS RRset (from referral address validation queries).
In those cases no new validation queries need to be made.</t>

<t>Resolvers may choose to delay the response to a triggering query until it can be verified that the answer came from a name server listening on an authoritatively acquired address for an authoritatively acquired name.
This would offer the most trustworthy responses with the least risk for forgery or eavesdropping.</t>

</section>
<section anchor="revalidation"><name>Delegation Revalidation</name>

<t>The essence of this mechanism is re-validation of all delegation metadata that directly or indirectly supports an owner name in cache.
This requires a cache to remember the delegated name server names for each zone cut as received from the parent (delegating) zone's name servers, and also the TTL of that NS RRset, and the TTL of the associated DS RRset (if seen).</t>

<t>A delegation under re-validation is called a "re-validation point" and is "still valid" if its parent zone's servers still respond to an in-zone question with a referral to the re-validation point, and if that referral overlaps with the previously cached referral by at least one name server name, and the DS RRset (if seen) overlaps the previously cached DS RRset (if also seen) by at least one delegated signer.</t>

<t>If the response is not a referral or refers to a different zone than before, then the shape of the delegation hierarchy has changed.
If the response is a referral to the re-validation point but to a wholly novel NS RRset or a wholly novel DS RRset, then the authority for that zone has changed.
For clarity, this includes transitions between empty and non-empty DS RRsets.</t>

<t>If the shape of the delegation hierarchy or the authority for a zone has been found to change, then no currently cached data whose owner names are at or below that re-validation point can be used.
Such non-use can be by directed garbage collection or lazy generational garbage collection or some other method befitting the architecture of the cache.
What matters is that the cache behave as though this data was removed.</t>

<t>Since re-validation can discover changes in the shape of the delegation hierarchy it is more efficient to re-validate from the top (root) downward (to the owner name) since an upper level re-validation may obviate lower level re-validations.
What matters is that the supporting chain of delegations from the root to the owner name be demonstrably valid; further specifics are implementation details.</t>

<t>Re-validation is triggered when delegation meta-data has been cached for a period at most exceeding the delegating NS or DS (if seen) RRset TTL.
If the corresponding child zone's apex NS RRset TTL is smaller than the delegating NS RRset TTL, revalidation should happen at that interval instead.
However, resolvers should impose a sensitive minimum TTL floor they are willing to endure to avoid potential computational DoS attacks inflicted by zones with very short TTLs.</t>

<t>In normal operations this meta-data can be quickly re-validated with no further work.
However, when re-delegation or take-down occurs, a re-validating cache will discover this within one delegation TTL period, allowing the rapid expulsion of old data from the cache.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document includes no request to IANA.</t>

</section>
<section anchor="Security"><name>Security Considerations</name>
<t>In <xref target="DNS-CACHE-INJECTIONS"/> an overview is given of 18 cache poisoning attacks from which 13 can be remedied with delegation revalidation.
The paper provides recommendations for handling records in DNS response with respect to an earlier version of the idea presented in this document<xref target="I-D.wijngaards-dnsext-resolver-side-mitigation"/>.</t>

<t>Referral response NS RRsets and glue, and the additional addresses from authoritative NS RRset responses (such as the root priming response), are not protected with DNSSEC signatures.
An attacker that is able to alter the unsigned A and AAAA RRsets in the additional section of referral and authoritative NS RRset responses, can fool a resolver into taking addresses under the control of the attacker to be authoritative for the zone.
Such an attacker can redirect all traffic to the zone (of the referral or authoritative NS RRset response) to a rogue name server.</t>

<t>A rogue name server can view all queries from the resolver to that zone and alter all unsigned parts of responses, such as the parent side NS RRsets and glue of further referral responses.
Resolvers following referrals from a rogue name server, that do not revalidate those referral responses, can subsequently be fooled into taking addresses under the control of the attacker to be authoritative for those delegations as well.
The higher up the DNS tree, the more impact such an attack has.
In case of non DNSSEC validating resolvers, an attacker controlling a rogue name server for the root has potentially complete control over the entire domain name space and can alter all unsigned parts undetected.</t>

<t>Revalidating referral and authoritative NS RRsets responses enables to defend against the above described attack with DNSSEC signed infrastructure RRsets.
Unlike cache poisoning defences that leverage increase entropy to protect the transaction, revalidation of NS RRsets and addresses also provides protection against on-path attacks.</t>

<t><xref target="upgrade-ns">Upgrading NS RRset Credibility</xref> allows resolvers to cache and utilize the authoritative child apex NS RRset in preference to the non-authoritative parent NS RRset.
However, it is important to implement the steps described in <xref target="revalidation">Delegation Revalidation</xref> at the expiration of the parent's delegating TTL.
Otherwise, the operator of a malicious child zone, originally delegated to, but subsequently delegated away from, can cause resolvers that refresh TTLs on subsequent NS set queries, or that pre-fetch NS queries, to never learn of the redelegated zone.</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">

&RFC1034;
&RFC1035;
&RFC2181;
&RFC8109;


    </references>

    <references title='Informative References' anchor="sec-informative-references">

&I-D.vixie-dnsext-resimprove;
&I-D.wijngaards-dnsext-resolver-side-mitigation;
<reference anchor="GHOST1" target="https://www.ndss-symposium.org/ndss2012/">
  <front>
    <title>Ghost Domain Names: Revoked Yet Still Resolvable</title>
    <author initials="J." surname="Jiang" fullname="J Jiang">
      <organization></organization>
    </author>
    <author initials="J." surname="Liang" fullname="J Liang">
      <organization></organization>
    </author>
    <author initials="K." surname="Li" fullname="K Li">
      <organization></organization>
    </author>
    <author initials="J." surname="Li" fullname="J Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="H Duan">
      <organization></organization>
    </author>
    <author initials="J." surname="Wu" fullname="J Wu">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="GHOST2" target="https://www.ndss-symposium.org/ndss-paper/ghost-domain-reloaded-vulnerable-links-in-domain-name-delegation-and-revocation/">
  <front>
    <title>Ghost Domain Reloaded: Vulnerable Links in Domain Name Delegation and Revocation</title>
    <author initials="X." surname="Li" fullname="Xiang Li">
      <organization></organization>
    </author>
    <author initials="B." surname="Liu" fullname="Baojun Liu">
      <organization></organization>
    </author>
    <author initials="X." surname="Bai" fullname="Xuesong Bai">
      <organization></organization>
    </author>
    <author initials="M." surname="Zhang" fullname="Mingming Zhang">
      <organization></organization>
    </author>
    <author initials="Q." surname="Zhang" fullname="Qifan Zhang">
      <organization></organization>
    </author>
    <author initials="Z." surname="Li" fullname="Zhou Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="Haixin Duan">
      <organization></organization>
    </author>
    <author initials="Q." surname="Li" fullname="Qi Li">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DNS-CACHE-INJECTIONS" target="https://ieeexplore.ieee.org/abstract/document/8057202">
  <front>
    <title>Internet-Wide Study of DNS Cache Injections</title>
    <author initials="A." surname="Klein" fullname="Amit Klein">
      <organization></organization>
    </author>
    <author initials="H." surname="Shulman" fullname="Haya Shulman">
      <organization></organization>
    </author>
    <author initials="M." surname="Waidner" fullname="Michael Waidner">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<?line 273?>

<section anchor="Acknowledgements"><name>Acknowledgements</name>

<t>Wouter Wijngaards proposed explicitly obtaining authoritative child NS data in <xref target="I-D.wijngaards-dnsext-resolver-side-mitigation"/>.
This behavior has been implemented in the Unbound DNS resolver via the "harden-referral-path" option.
The combination of child NS fetch and revalidating the child delegation was originally proposed in <xref target="I-D.vixie-dnsext-resimprove"/>, by Paul Vixie, Rodney Joffe, and Frederico Neves.</t>

<t>The authors would like to thank Ralph Dolmans who was an early collaborator on this work, as well as the many members of the IETF DNS Operations Working Group for helpful comments and discussion.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA9VcW28cN5Z+719BaB5GArrbssbJZLRYIIrlxEocOZGUOJNg
HthV7G6OqsiaYpXabcP/fc+FZLEuLTvZYIE1EESqC3l4rt+5lBaLxazRTaHO
xaUq1EY22hpxox5koXP+ZbUXl9e3cM3Z4kHVbiZXq1o9nNPVAy/NcpsZWcKq
eS3XzUKrZr3IjbPVwrhFnTy5OP37DH6CJ89Oz54tTj9fnD2bzXRVn4umbl1z
dnr6j9OzmWtXpXYOXmj2FTx89eLu65mslTwXrytV01JOSJOL76WRG1Uq04gL
uD/bbYBSW0ptxDVQJG73rlFl8tbsfnc+E2IhrkyjaqOaxSXSTJfgiPT/cHi+
GM/s7yXnxgsXbbO1tW7gyoOiK7yxqmEFeDyzdc6XefEf4ByG93u+1UUed2zr
TPnn4e1mlsnmXLgmnz0o0yokelPbtiJJvP4BfoVTFsBy5POXyPKlrTf4lG62
7Qpe3bb/adWTgQRms0qfi98am82Fs3VTq7WDn/Yl/vCv2UzScYhF8J8Q2rhz
cbsUL3ExusKSvt22JahBdxk2l0a/o03gtiyUW1s4Et1UTCuT9OUGf1tmtuzv
8sNS/Kzf6nSXH2RbJBcHe1y9EC/a2lZqLn5afrNMd6rgxS9rla9kbTxfkp3e
LMWdtfBmstUbXRSgKcn1/m7Xr0BZxCu5cnTTAecUCOg208qA4ECs9+LZ6Snd
zHSzPxcXJehencuSr9kcdnl6+o8vxC8v/ZXWNDU8eK2araoL0GeXnmFHFH1p
Cti4gH2XppjNjK1LUrVzevTm6+dPT//2LP3ls/jL2dMvnsZfvoCtz8HWzLq/
wtXicvmAHEaLVW8b0Bany6q26QM7/W+zkbLOXfIU2cjC6VwtSt1oNhJ+55uX
r2/v/N74r5H1Brm1bZrKnT95stvtlnBatwDFq6zTbYlCeoKXzk6fnj3pXmRv
dfTN1romtWyQIpiivVe5+CfI5bYBZnnDlatCHcUVOoUO/xbJz0H634pvtTSb
3h1SlW+XozvT7786+P7wztT738FT45e/W/YvH9r5wLYfefOluGylGb/7cjm8
Mb3vm3ZyX3+ZVODsD6nAopLgr59sUOaLnGQO+lZYmat88dCCPdQo40Whzb1b
wE3/DBK2yKO/XoBBoe+zGf36EaW68Ruci5/jDsBD2AFO1ospSRTEEHQTd/i9
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
AZsPD0KSTAAA

-->

</rfc>

