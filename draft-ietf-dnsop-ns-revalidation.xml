<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.6 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC1034 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY I-D.vixie-dnsext-resimprove SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.vixie-dnsext-resimprove.xml">
<!ENTITY I-D.wijngaards-dnsext-resolver-side-mitigation SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.wijngaards-dnsext-resolver-side-mitigation.xml">
]>


<rfc ipr="trust200902" docName="draft-ietf-dnsop-ns-revalidation-05" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="DNS Delegation Revalidation">Delegation Revalidation by DNS Resolvers</title>

    <author initials="S." surname="Huque" fullname="Shumon Huque">
      <organization>Salesforce</organization>
      <address>
        <email>shuque@gmail.com</email>
      </address>
    </author>
    <author initials="P." surname="Vixie" fullname="Paul Vixie">
      <organization>SIE Europe, U.G.</organization>
      <address>
        <email>paul@redbarn.org</email>
      </address>
    </author>
    <author initials="R." surname="Dolmans" fullname="Ralph Dolmans">
      <organization>NLnet Labs</organization>
      <address>
        <email>ralph@nlnetlabs.nl</email>
      </address>
    </author>

    <date year="2024" month="March" day="01"/>

    <area>Operations and Management Area</area>
    <workgroup>Domain Name System Operations</workgroup>
    <keyword>Internet-Draft</keyword> <keyword>DNS</keyword> <keyword>Resolver</keyword> <keyword>Delegation</keyword> <keyword>Revalidation</keyword> <keyword>Authoritative</keyword> <keyword>Name Server Record</keyword> <keyword>NS</keyword> <keyword>Parent</keyword> <keyword>Child</keyword> <keyword>Resource Record Set</keyword>

    <abstract>


<?line 104?>

<t>This document recommends improved DNS <xref target="RFC1034"/> <xref target="RFC1035"/> resolver behavior with respect to the processing of Name Server (NS) resource record sets (RRset) during iterative resolution.
When following a referral response from an authoritative server to a child zone, DNS resolvers should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
Resolvers should also periodically revalidate the child delegation by re-quering the parent zone at the expiration of the TTL of the parent side NS RRset.</t>



    </abstract>



  </front>

  <middle>


<?line 110?>

<section anchor="into"><name>Introduction</name>

<t>RFC EDITOR: PLEASE REMOVE THIS PARAGRAPH BEFORE PUBLISHING: The source for this draft is maintained in GitHub at: <eref target="https://github.com/shuque/ns-revalidation">https://github.com/shuque/ns-revalidation</eref></t>

<t>This document recommends improved DNS resolver behavior with respect to the processing of NS record sets during iterative resolution.
The first recommendation is that resolvers, when following a referral response from an authoritative server to a child zone, should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
The second recommendation is to revalidate the delegation by re-quering the parent zone at the expiration of the TTL of the parent side NS RRset.</t>

</section>
<section anchor="motivation"><name>Motivation</name>

<t>There is wide variability in the behavior of deployed DNS resolvers today with respect to how they process delegation records.
Some of them prefer the parent NS set, some prefer the child, and for others, what they preferentially cache depends on the dynamic state of queries and responses they have processed.
This document aims to bring more commonality and predictability by standardizing the behavior in a way that comports with the DNS protocol.</t>

<t>The delegation NS RRset at the bottom of the parent zone and the apex NS RRset in the child zone are unsynchronized in the DNS protocol.
<xref target="RFC1034"/> Section 4.2.2 says "The administrators of both zones should insure that the NS and glue RRs which mark both sides of the cut are consistent and remain so.".
But for a variety of reasons they could not be.
Officially, a child zone's apex NS RRset is authoritative and thus has a higher cache credibility than the parent's delegation NS RRset, which is non-authoritative glue <xref target="RFC2181"/>, Section 5.4.1. "Ranking data", and Section 6.1. "Zone authority").
Hence the NS RRset "below the zone cut" should immediately replace the parent's delegating NS RRset in cache when an iterative caching DNS resolver crosses a zone boundary.
However, this can only happen if (1) the resolver receives the authoritative NS RRset in the Authority section of a response from the child zone, which is not mandatory, or (2) if the resolver explicitly issues an NS RRset query to the child zone as part of its iterative resolution algorithm.
In the absence of this, it is possible for an iterative caching resolver to never learn the authoritative NS RRset for a zone, unless a downstream client of the resolver explicitly issues such an NS query, which is not something that normal enduser applications do, and thus cannot be relied upon to occur with any regularity.</t>

<t>Increasingly, there is a trend towards minimizing unnecessary data in DNS responses.
Several popular DNS implementations default to such a configuration (see "minimal-responses" in BIND and NSD).
So, they may never include the authoritative NS RRset in the Authority section of their responses.</t>

<t>A common reason that zone owners want to ensure that resolvers place the authoritative NS RRset preferentially in their cache is that the TTLs may differ between the parent and child side of the zone cut.
Some DNS Top Level Domains (TLDs) only support long fixed TTLs in their delegation NS sets.
This inhibits a child zone owner's ability to make more rapid changes to their nameserver configuration using a shorter TTL, if resolvers have no systematic mechanism to observe and cache the child NS RRset.</t>

<t>A child zone's delegation still needs to be periodically revalidated at the parent to make sure that the parent zone has not legitimately re-delegated the zone to a different set of nameservers, or even removed the delegation.
Otherwise, resolvers that refresh the TTL of a child NS RRset on subsequent queries or due to pre-fetching, may cling to those nameservers long after they have been re-delegated elsewhere.
This leads to the second recommendation in this document, "Delegation Revalidation" - Resolvers should record the TTL of the parent's delegating NS RRset, and use it to trigger a revalidation action.
Attacks exploiting lack of this revalidation have been described in <xref target="GHOST1"/>, <xref target="GHOST2"/>.</t>

</section>
<section anchor="upgrade-ns"><name>Upgrading NS RRset Credibility</name>

<t><list style="symbols">
  <t>When a referral response is received during iteration, a validation query should be sent in parallel with the resolution of the triggering query, to the delegated nameservers for the newly discovered zone cut.
Note that validating resolvers today, when following a secure referral, already need to dispatch a query to the delegated nameservers for the DNSKEY RRset, so this validation query could be sent in parallel with that DNSKEY query.</t>
  <t>A validation query consists of a query for the child's apex NS RRset, sent to the newly discovered delegation's nameservers.
Normal iterative logic applies to the processing of responses to validation queries, including storing the results in cache, trying the next server on SERVFAIL or timeout, and so on.
Positive responses to this validation query will be cached with an authoritative data ranking.
Successive queries directed to the same zone will be directed to the nameservers listed in the child's apex, due to the ranking of this answer.
If the validation query fails, the parent NS RRset will remain the one with the highest ranking and will be used for successive queries.</t>
  <t>Resolvers may choose to delay the response to the triggering query until both the triggering query and the validation query have been answered.
In practice, we expect many implementations may answer the triggering query in advance of the validation query for performance reasons.
An additional reason is that there are unfortunately a number of nameservers in the field that (incorrectly) fail to properly answer explicit queries for zone apex NS records, and thus the revalidation logic may need to be applied lazily and opportunistically to deal with them.
In cases where the delegated nameservers respond incorrectly to an NS query, the resolver should abandon this algorithm for the zone in question and fall back to using only the information from the parent's referral response.</t>
  <t>If the resolver chooses to delay the response, and there are no nameserver names in common between the child's apex NS RRset and the parent's delegation NS RRset, then the responses received from forwarding the triggering query to the parent's delegated nameservers should be discarded after validation, and this query should be forwarded again to the child's apex nameservers.</t>
</list></t>

</section>
<section anchor="revalidation"><name>Delegation Revalidation</name>

<t>The essence of this mechanism is re-validation of all delegation metadata that directly or indirectly supports an owner name in cache.
This requires a cache to remember the delegated name server names for each zone cut as received from the parent (delegating) zone's name servers, and also the TTL of that NS RRset, and the TTL of the associated DS RRset (if seen).</t>

<t>A delegation under re-validation is called a "re-validation point" and is "still valid" if its parent zone's servers still respond to an in-zone question with a referral to the re-validation point, and if that referral overlaps with the previously cached referral by at least one name server name, and the DS RRset (if seen) overlaps the previously cached DS RRset (if also seen) by at least one delegated signer.</t>

<t>If the response is not a referral or refers to a different zone than before, then the shape of the delegation hierarchy has changed.
If the response is a referral to the re-validation point but to a wholly novel NS RRset or a wholly novel DS RRset, then the authority for that zone has changed.
For clarity, this includes transitions between empty and non-empty DS RRsets.</t>

<t>If the shape of the delegation hierarchy or the authority for a zone has been found to change, then no currently cached data whose owner names are at or below that re-validation point can be used.
Such non-use can be by directed garbage collection or lazy generational garbage collection or some other method befitting the architecture of the cache.
What matters is that the cache behave as though this data was removed.</t>

<t>Since re-validation can discover changes in the shape of the delegation hierarchy it is more efficient to re-validate from the top (root) downward (to the owner name) since an upper level re-validation may obviate lower level re-validations.
What matters is that the supporting chain of delegations from the root to the owner name be demonstrably valid; further specifics are implementation details.</t>

<t>Re-validation is triggered when delegation meta-data has been cached for a period at most exceeding the delegating NS or DS (if seen) RRset TTL.
If the corresponding child zone's apex NS RRset TTL is smaller than the delegating NS RRset TTL, revalidation should happen at that interval instead.
However, resolvers should impose a sensitive minimum TTL floor they are willing to endure to avoid potential computational DoS attacks inflicted by zones with very short TTLs.</t>

<t>In normal operations this meta-data can be quickly re-validated with no further work.
However, when re-delegation or take-down occurs, a re-validating cache will discover this within one delegation TTL period, allowing the rapid expulsion of old data from the cache.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document includes no request to IANA.</t>

</section>
<section anchor="Security"><name>Security Considerations</name>

<t><xref target="upgrade-ns">Upgrading NS RRset Credibility</xref> allows resolvers to cache and utilize the authoritative child apex NS RRset in preference to the non-authoriative parent NS RRset.
However, it is important to implement the steps described in <xref target="revalidation">Delegation Revalidation</xref> at the expiration of the parent's delegating TTL.
Otherwise, the operator of a malicious child zone, originally delegated to, but subsequently delegated away from, can cause resolvers that refresh TTLs on subsequent NS set queries, or that pre-fetch NS queries, to never learn of the redelegated zone.</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">

&RFC1034;
&RFC1035;
&RFC2181;


    </references>

    <references title='Informative References' anchor="sec-informative-references">

&I-D.vixie-dnsext-resimprove;
&I-D.wijngaards-dnsext-resolver-side-mitigation;
<reference anchor="GHOST1" target="https://www.ndss-symposium.org/ndss2012/">
  <front>
    <title>Ghost Domain Names: Revoked Yet Still Resolvable</title>
    <author initials="J." surname="Jiang" fullname="J Jiang">
      <organization></organization>
    </author>
    <author initials="J." surname="Liang" fullname="J Liang">
      <organization></organization>
    </author>
    <author initials="K." surname="Li" fullname="K Li">
      <organization></organization>
    </author>
    <author initials="J." surname="Li" fullname="J Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="H Duan">
      <organization></organization>
    </author>
    <author initials="J." surname="Wu" fullname="J Wu">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="GHOST2" target="https://www.ndss-symposium.org/ndss-paper/ghost-domain-reloaded-vulnerable-links-in-domain-name-delegation-and-revocation/">
  <front>
    <title>Ghost Domain Reloaded: Vulnerable Links in Domain Name Delegation and Revocation</title>
    <author initials="X." surname="Li" fullname="Xiang Li">
      <organization></organization>
    </author>
    <author initials="B." surname="Liu" fullname="Baojun Liu">
      <organization></organization>
    </author>
    <author initials="X." surname="Bai" fullname="Xuesong Bai">
      <organization></organization>
    </author>
    <author initials="M." surname="Zhang" fullname="Mingming Zhang">
      <organization></organization>
    </author>
    <author initials="Q." surname="Zhang" fullname="Qifan Zhang">
      <organization></organization>
    </author>
    <author initials="Z." surname="Li" fullname="Zhou Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="Haixin Duan">
      <organization></organization>
    </author>
    <author initials="Q." surname="Li" fullname="Qi Li">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<?line 208?>

<section anchor="Acknowledgements"><name>Acknowledgements</name>

<t>Wouter Wijngaards proposed explicitly obtaining authoritative child NS data in <xref target="I-D.wijngaards-dnsext-resolver-side-mitigation"/>.
This behavior has been implemented in the Unbound DNS resolver via the "harden-referral-path" option.
The combination of child NS fetch and revalidating the child delegation was originally proposed in <xref target="I-D.vixie-dnsext-resimprove"/>, by Vixie, Joffe, and Neves.</t>

</section>


  </back>

<!-- ##markdown-source:
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
9v8GMKSqUis1AAA=

-->

</rfc>

