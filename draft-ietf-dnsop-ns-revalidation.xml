<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.6 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC1034 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY I-D.vixie-dnsext-resimprove SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.vixie-dnsext-resimprove.xml">
<!ENTITY I-D.wijngaards-dnsext-resolver-side-mitigation SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.wijngaards-dnsext-resolver-side-mitigation.xml">
]>


<rfc ipr="trust200902" docName="draft-ietf-dnsop-ns-revalidation-05" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="DNS Delegation Revalidation">Delegation Revalidation by DNS Resolvers</title>

    <author initials="S." surname="Huque" fullname="Shumon Huque">
      <organization>Salesforce</organization>
      <address>
        <email>shuque@gmail.com</email>
      </address>
    </author>
    <author initials="P." surname="Vixie" fullname="Paul Vixie">
      <organization>SIE Europe, U.G.</organization>
      <address>
        <email>paul@redbarn.org</email>
      </address>
    </author>
    <author initials="R." surname="Dolmans" fullname="Ralph Dolmans">
      <organization>NLnet Labs</organization>
      <address>
        <email>ralph@nlnetlabs.nl</email>
      </address>
    </author>

    <date year="2024" month="March" day="04"/>

    <area>Operations and Management Area</area>
    <workgroup>Domain Name System Operations</workgroup>
    <keyword>Internet-Draft</keyword> <keyword>DNS</keyword> <keyword>Resolver</keyword> <keyword>Delegation</keyword> <keyword>Revalidation</keyword> <keyword>Authoritative</keyword> <keyword>Name Server Record</keyword> <keyword>NS</keyword> <keyword>Parent</keyword> <keyword>Child</keyword> <keyword>Resource Record Set</keyword>

    <abstract>


<?line 104?>

<t>This document recommends improved DNS <xref target="RFC1034"/> <xref target="RFC1035"/> resolver behavior with respect to the processing of Name Server (NS) resource record sets (RRset) during iterative resolution.
When following a referral response from an authoritative server to a child zone, DNS resolvers should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
Resolvers should also periodically revalidate the child delegation by re-quering the parent zone at the expiration of the TTL of the parent side NS RRset.</t>



    </abstract>



  </front>

  <middle>


<?line 110?>

<section anchor="into"><name>Introduction</name>

<t>RFC EDITOR: PLEASE REMOVE THIS PARAGRAPH BEFORE PUBLISHING: The source for this draft is maintained in GitHub at: <eref target="https://github.com/shuque/ns-revalidation">https://github.com/shuque/ns-revalidation</eref></t>

<t>This document recommends improved DNS resolver behavior with respect to the processing of NS record sets during iterative resolution.
The first recommendation is that resolvers, when following a referral response from an authoritative server to a child zone, should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
The second recommendation is to revalidate the delegation by re-quering the parent zone at the expiration of the TTL of the parent side NS RRset.</t>

</section>
<section anchor="motivation"><name>Motivation</name>

<t>There is wide variability in the behavior of deployed DNS resolvers today with respect to how they process delegation records.
Some of them prefer the parent NS set, some prefer the child, and for others, what they preferentially cache depends on the dynamic state of queries and responses they have processed.
This document aims to bring more commonality and predictability by standardizing the behavior in a way that comports with the DNS protocol.</t>

<t>The delegation NS RRset at the bottom of the parent zone and the apex NS RRset in the child zone are unsynchronized in the DNS protocol.
<xref target="RFC1034"/> Section 4.2.2 says "The administrators of both zones should insure that the NS and glue RRs which mark both sides of the cut are consistent and remain so.".
But for a variety of reasons they could not be.
Officially, a child zone's apex NS RRset is authoritative and thus has a higher cache credibility than the parent's delegation NS RRset, which is non-authoritative glue <xref target="RFC2181"/>, Section 5.4.1. "Ranking data", and Section 6.1. "Zone authority").
Hence the NS RRset "below the zone cut" should immediately replace the parent's delegating NS RRset in cache when an iterative caching DNS resolver crosses a zone boundary.
However, this can only happen if (1) the resolver receives the authoritative NS RRset in the Authority section of a response from the child zone, which is not mandatory, or (2) if the resolver explicitly issues an NS RRset query to the child zone as part of its iterative resolution algorithm.
In the absence of this, it is possible for an iterative caching resolver to never learn the authoritative NS RRset for a zone, unless a downstream client of the resolver explicitly issues such an NS query, which is not something that normal enduser applications do, and thus cannot be relied upon to occur with any regularity.</t>

<t>Increasingly, there is a trend towards minimizing unnecessary data in DNS responses.
Several popular DNS implementations default to such a configuration (see "minimal-responses" in BIND and NSD).
So, they may never include the authoritative NS RRset in the Authority section of their responses.</t>

<t>A common reason that zone owners want to ensure that resolvers place the authoritative NS RRset preferentially in their cache is that the TTLs may differ between the parent and child side of the zone cut.
Some DNS Top Level Domains (TLDs) only support long fixed TTLs in their delegation NS sets.
This inhibits a child zone owner's ability to make more rapid changes to their nameserver configuration using a shorter TTL, if resolvers have no systematic mechanism to observe and cache the child NS RRset.</t>

<t>A child zone's delegation still needs to be periodically revalidated at the parent to make sure that the parent zone has not legitimately re-delegated the zone to a different set of nameservers, or even removed the delegation.
Otherwise, resolvers that refresh the TTL of a child NS RRset on subsequent queries or due to pre-fetching, may cling to those nameservers long after they have been re-delegated elsewhere.
This leads to the second recommendation in this document, "Delegation Revalidation" - Resolvers should record the TTL of the parent's delegating NS RRset, and use it to trigger a revalidation action.
Attacks exploiting lack of this revalidation have been described in <xref target="GHOST1"/>, <xref target="GHOST2"/>.</t>

</section>
<section anchor="upgrade-ns"><name>Upgrading NS RRset Credibility</name>

<t><list style="symbols">
  <t>When a referral response is received during iteration, a validation query should be sent in parallel with the resolution of the triggering query, to the delegated nameservers for the newly discovered zone cut.
Note that validating resolvers today, when following a secure referral, already need to dispatch a query to the delegated nameservers for the DNSKEY RRset, so this validation query could be sent in parallel with that DNSKEY query.</t>
  <t>A validation query consists of a query for the child's apex NS RRset, sent to the newly discovered delegation's nameservers.
Normal iterative logic applies to the processing of responses to validation queries, including storing the results in cache, trying the next server on SERVFAIL or timeout, and so on.
Positive responses to this validation query will be cached with an authoritative data ranking.
Successive queries directed to the same zone will be directed to the nameservers listed in the child's apex, due to the ranking of this answer.
If the validation query fails, the parent NS RRset will remain the one with the highest ranking and will be used for successive queries.</t>
  <t>Resolvers may choose to delay the response to the triggering query until both the triggering query and the validation query have been answered.
In practice, we expect many implementations may answer the triggering query in advance of the validation query for performance reasons.
An additional reason is that there are unfortunately a number of nameservers in the field that (incorrectly) fail to properly answer explicit queries for zone apex NS records, and thus the revalidation logic may need to be applied lazily and opportunistically to deal with them.
In cases where the delegated nameservers respond incorrectly to an NS query, the resolver should abandon this algorithm for the zone in question and fall back to using only the information from the parent's referral response.</t>
  <t>If the resolver chooses to delay the response, and there are no nameserver names in common between the child's apex NS RRset and the parent's delegation NS RRset, then the responses received from forwarding the triggering query to the parent's delegated nameservers should be discarded after validation, and this query should be forwarded again to the child's apex nameservers.</t>
</list></t>

</section>
<section anchor="revalidation"><name>Delegation Revalidation</name>

<t>The essence of this mechanism is re-validation of all delegation metadata that directly or indirectly supports an owner name in cache.
This requires a cache to remember the delegated name server names for each zone cut as received from the parent (delegating) zone's name servers, and also the TTL of that NS RRset, and the TTL of the associated DS RRset (if seen).</t>

<t>A delegation under re-validation is called a "re-validation point" and is "still valid" if its parent zone's servers still respond to an in-zone question with a referral to the re-validation point, and if that referral overlaps with the previously cached referral by at least one name server name, and the DS RRset (if seen) overlaps the previously cached DS RRset (if also seen) by at least one delegated signer.</t>

<t>If the response is not a referral or refers to a different zone than before, then the shape of the delegation hierarchy has changed.
If the response is a referral to the re-validation point but to a wholly novel NS RRset or a wholly novel DS RRset, then the authority for that zone has changed.
For clarity, this includes transitions between empty and non-empty DS RRsets.</t>

<t>If the shape of the delegation hierarchy or the authority for a zone has been found to change, then no currently cached data whose owner names are at or below that re-validation point can be used.
Such non-use can be by directed garbage collection or lazy generational garbage collection or some other method befitting the architecture of the cache.
What matters is that the cache behave as though this data was removed.</t>

<t>Since re-validation can discover changes in the shape of the delegation hierarchy it is more efficient to re-validate from the top (root) downward (to the owner name) since an upper level re-validation may obviate lower level re-validations.
What matters is that the supporting chain of delegations from the root to the owner name be demonstrably valid; further specifics are implementation details.</t>

<t>Re-validation is triggered when delegation meta-data has been cached for a period at most exceeding the delegating NS or DS (if seen) RRset TTL.
If the corresponding child zone's apex NS RRset TTL is smaller than the delegating NS RRset TTL, revalidation should happen at that interval instead.
However, resolvers should impose a sensitive minimum TTL floor they are willing to endure to avoid potential computational DoS attacks inflicted by zones with very short TTLs.</t>

<t>In normal operations this meta-data can be quickly re-validated with no further work.
However, when re-delegation or take-down occurs, a re-validating cache will discover this within one delegation TTL period, allowing the rapid expulsion of old data from the cache.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document includes no request to IANA.</t>

</section>
<section anchor="Security"><name>Security Considerations</name>

<t><xref target="upgrade-ns">Upgrading NS RRset Credibility</xref> allows resolvers to cache and utilize the authoritative child apex NS RRset in preference to the non-authoriative parent NS RRset.
However, it is important to implement the steps described in <xref target="revalidation">Delegation Revalidation</xref> at the expiration of the parent's delegating TTL.
Otherwise, the operator of a malicious child zone, originally delegated to, but subsequently delegated away from, can cause resolvers that refresh TTLs on subsequent NS set queries, or that pre-fetch NS queries, to never learn of the redelegated zone.</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">

&RFC1034;
&RFC1035;
&RFC2181;


    </references>

    <references title='Informative References' anchor="sec-informative-references">

&I-D.vixie-dnsext-resimprove;
&I-D.wijngaards-dnsext-resolver-side-mitigation;
<reference anchor="GHOST1" target="https://www.ndss-symposium.org/ndss2012/">
  <front>
    <title>Ghost Domain Names: Revoked Yet Still Resolvable</title>
    <author initials="J." surname="Jiang" fullname="J Jiang">
      <organization></organization>
    </author>
    <author initials="J." surname="Liang" fullname="J Liang">
      <organization></organization>
    </author>
    <author initials="K." surname="Li" fullname="K Li">
      <organization></organization>
    </author>
    <author initials="J." surname="Li" fullname="J Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="H Duan">
      <organization></organization>
    </author>
    <author initials="J." surname="Wu" fullname="J Wu">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="GHOST2" target="https://www.ndss-symposium.org/ndss-paper/ghost-domain-reloaded-vulnerable-links-in-domain-name-delegation-and-revocation/">
  <front>
    <title>Ghost Domain Reloaded: Vulnerable Links in Domain Name Delegation and Revocation</title>
    <author initials="X." surname="Li" fullname="Xiang Li">
      <organization></organization>
    </author>
    <author initials="B." surname="Liu" fullname="Baojun Liu">
      <organization></organization>
    </author>
    <author initials="X." surname="Bai" fullname="Xuesong Bai">
      <organization></organization>
    </author>
    <author initials="M." surname="Zhang" fullname="Mingming Zhang">
      <organization></organization>
    </author>
    <author initials="Q." surname="Zhang" fullname="Qifan Zhang">
      <organization></organization>
    </author>
    <author initials="Z." surname="Li" fullname="Zhou Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="Haixin Duan">
      <organization></organization>
    </author>
    <author initials="Q." surname="Li" fullname="Qi Li">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<?line 208?>

<section anchor="Acknowledgements"><name>Acknowledgements</name>

<t>Wouter Wijngaards proposed explicitly obtaining authoritative child NS data in <xref target="I-D.wijngaards-dnsext-resolver-side-mitigation"/>.
This behavior has been implemented in the Unbound DNS resolver via the "harden-referral-path" option.
The combination of child NS fetch and revalidating the child delegation was originally proposed in <xref target="I-D.vixie-dnsext-resimprove"/>, by Vixie, Joffe, and Neves.</t>

</section>


  </back>

<!-- ##markdown-source:
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
Ift/A0oOejYrNQAA

-->

</rfc>

