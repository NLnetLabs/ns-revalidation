<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.17 (Ruby 3.2.3) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC1034 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC8109 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8109.xml">
<!ENTITY I-D.vixie-dnsext-resimprove SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.vixie-dnsext-resimprove.xml">
<!ENTITY I-D.wijngaards-dnsext-resolver-side-mitigation SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.wijngaards-dnsext-resolver-side-mitigation.xml">
]>


<rfc ipr="trust200902" docName="draft-ietf-dnsop-ns-revalidation-07" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="DNS Delegation Revalidation">Delegation Revalidation by DNS Resolvers</title>

    <author initials="S." surname="Huque" fullname="Shumon Huque">
      <organization>Salesforce</organization>
      <address>
        <email>shuque@gmail.com</email>
      </address>
    </author>
    <author initials="P." surname="Vixie" fullname="Paul Vixie">
      <organization>SIE Europe, U.G.</organization>
      <address>
        <email>paul@redbarn.org</email>
      </address>
    </author>
    <author initials="W." surname="Toorop" fullname="Willem Toorop">
      <organization>NLnet Labs</organization>
      <address>
        <postal>
          <street>Science Park 400</street>
          <city>Amsterdam</city>
          <code>1098 XH</code>
          <country>Netherlands</country>
        </postal>
        <email>willem@nlnetlabs.nl</email>
      </address>
    </author>

    <date year="2024" month="June" day="24"/>

    <area>Operations and Management Area</area>
    <workgroup>Domain Name System Operations</workgroup>
    <keyword>Internet-Draft</keyword> <keyword>DNS</keyword> <keyword>Resolver</keyword> <keyword>Delegation</keyword> <keyword>Revalidation</keyword> <keyword>Authoritative</keyword> <keyword>Name Server Record</keyword> <keyword>NS</keyword> <keyword>Parent</keyword> <keyword>Child</keyword> <keyword>Resource Record Set</keyword>

    <abstract>


<?line 125?>

<t>This document recommends improved DNS <xref target="RFC1034"/> <xref target="RFC1035"/> resolver behavior with respect to the processing of Name Server (NS) resource record sets (RRset) during iterative resolution.
When following a referral response from an authoritative server to a child zone, DNS resolvers should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
The (A and AAAA) address RRsets in the additional section from referral responses and authoritative NS answers for the names of the NS RRset, should similarly be re-queried and used to replace the entries with the lower trustworthiness ranking in cache.
Resolvers should also periodically revalidate the child delegation by re-querying the parent zone at the expiration of the TTL of the parent side NS RRset.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-dnsop-ns-revalidation/"/>.
      </t>
      <t>
        Discussion of this document takes place on the
        DNSOP Working Group mailing list (<eref target="mailto:dnsop@ietf.org"/>),
        which is archived at <eref target="https://mailarchive.ietf.org/arch/browse/dnsop/"/>.
        Subscribe at <eref target="https://www.ietf.org/mailman/listinfo/dnsop/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/shuque/ns-revalidation"/>.</t>
    </note>


  </front>

  <middle>


<?line 132?>

<section anchor="into"><name>Introduction</name>

<t>This document recommends improved DNS resolver behavior with respect to the processing of NS record sets during iterative resolution.
The first recommendation is that resolvers, when following a referral response from an authoritative server to a child zone, should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
The address records in the additional section from the referral response (as glue) or authoritative NS response that match the names of the NS RRset should similarly be required if they are cached non-authoritatively.
The authoritative answers from those queries should replace the cached non-authoritative A and AAAA RRsets.
The second recommendation is to revalidate the delegation by re-querying the parent zone at the expiration of the TTL of the parent side NS RRset.</t>

</section>
<section anchor="motivation"><name>Motivation</name>

<t>There is wide variability in the behavior of deployed DNS resolvers today with respect to how they process delegation records.
Some of them prefer the parent NS set, some prefer the child, and for others, what they preferentially cache depends on the dynamic state of queries and responses they have processed.
This document aims to bring more commonality and predictability by standardizing the behavior in a way that comports with the DNS protocol.
Another goal is to improve DNS security.</t>

<t>The delegation NS RRset at the bottom of the parent zone and the apex NS RRset in the child zone are unsynchronized in the DNS protocol.
<xref target="RFC1034"/> Section 4.2.2 says "The administrators of both zones should insure that the NS and glue RRs which mark both sides of the cut are consistent and remain so.".
But for a variety of reasons they could not be.
Officially, a child zone's apex NS RRset is authoritative and thus has a higher cache credibility than the parent's delegation NS RRset, which is non-authoritative glue <xref target="RFC2181"/>, Section 5.4.1. "Ranking data", and Section 6.1. "Zone authority").
Hence the NS RRset "below the zone cut" should immediately replace the parent's delegating NS RRset in cache when an iterative caching DNS resolver crosses a zone boundary.
However, this can only happen if (1) the resolver receives the authoritative NS RRset in the Authority section of a response from the child zone, which is not mandatory, or (2) if the resolver explicitly issues an NS RRset query to the child zone as part of its iterative resolution algorithm.
In the absence of this, it is possible for an iterative caching resolver to never learn the authoritative NS RRset for a zone, unless a downstream client of the resolver explicitly issues such an NS query, which is not something that normal enduser applications do, and thus cannot be relied upon to occur with any regularity.</t>

<t>Increasingly, there is a trend towards minimizing unnecessary data in DNS responses.
Several popular DNS implementations default to such a configuration (see "minimal-responses" in BIND and NSD).
So, they may never include the authoritative NS RRset in the Authority section of their responses.</t>

<t>A common reason that zone owners want to ensure that resolvers place the authoritative NS RRset preferentially in their cache is that the TTLs may differ between the parent and child side of the zone cut.
Some DNS Top Level Domains (TLDs) only support long fixed TTLs in their delegation NS sets.
This inhibits a child zone owner's ability to make more rapid changes to their nameserver configuration using a shorter TTL, if resolvers have no systematic mechanism to observe and cache the child NS RRset.</t>

<t>Similarly, a child zone owner may also choose to have longer TTLs in their delegation NS sets and address records to decrease the attack window for cache poisoning attacks.
For example, at the time of writing, root-servers.net has a TTL of 6 weeks for the root server identifier address records, where the TTL in the priming response is 6 days.</t>

<t>A child zone's delegation still needs to be periodically revalidated at the parent to make sure that the parent zone has not legitimately re-delegated the zone to a different set of nameservers, or even removed the delegation.
Otherwise, resolvers that refresh the TTL of a child NS RRset on subsequent queries or due to pre-fetching, may cling to those nameservers long after they have been re-delegated elsewhere.
This leads to the second recommendation in this document, "Delegation Revalidation" - Resolvers should record the TTL of the parent's delegating NS RRset, and use it to trigger a revalidation action.
Attacks exploiting lack of this revalidation have been described in <xref target="GHOST1"/>, <xref target="GHOST2"/>.</t>

</section>
<section anchor="upgrade-ns"><name>Upgrading NS RRset Credibility</name>

<t><list style="symbols">
  <t>When a referral response is received during iteration, a validation query should be sent in parallel with the resolution of the triggering query, to the delegated nameservers for the newly discovered zone cut.
Note that validating resolvers today, when following a secure referral, already need to dispatch a query to the delegated nameservers for the DNSKEY RRset, so this validation query could be sent in parallel with that DNSKEY query.</t>
  <t>A validation query consists of a query for the child's apex NS RRset, sent to the newly discovered delegation's nameservers.
Normal iterative logic applies to the processing of responses to validation queries, including storing the results in cache, trying the next server on SERVFAIL or timeout, and so on.
Positive responses to this validation query will be cached with an authoritative data ranking.
Successive queries directed to the same zone will be directed to the nameservers listed in the child's apex, due to the ranking of this answer.
If the validation query fails, the parent NS RRset will remain the one with the highest ranking and will be used for successive queries.</t>
  <t>Additional validation queries for the "glue" resource records of referral responses (if not already authoritatively present in cache) may be sent with the validation query for the NS RRset as well.
Positive responses will be cached authoritatively and replace the non authoritative "glue" entries.
Successive queries directed to the same zone will be directed to the authoritative values for the names of the NS RRset in the referral response.</t>
  <t>The names from the NS RRset from a validating NS query may differ from the names in NS RRset in the referral response.
Outstanding validation queries for "glue" that do not match names in the authoritative NS RRset be discarded, or they may be left running to completion.
Their result will no longer be used in queries for the zone.
Outstanding validation queries for "glue" that do match names in the authoritative NS RRset must be left running to completion.
They do not need to be re-queried after reception of the authoritative NS RRset (see <xref target="upgrade-addresses"></xref>).</t>
  <t>Resolvers may choose to delay the response to the triggering query until both the triggering query and the validation query have been answered.
In practice, we expect many implementations may answer the triggering query in advance of the validation query for performance reasons.
An additional reason is that there are unfortunately a number of nameservers in the field that (incorrectly) fail to properly answer explicit queries for zone apex NS records, and thus the revalidation logic may need to be applied lazily and opportunistically to deal with them.
In cases where the delegated nameservers respond incorrectly to an NS query, the resolver should abandon this algorithm for the zone in question and fall back to using only the information from the parent's referral response.</t>
  <t>If the resolver chooses to delay the response, and there are no nameserver names in common between the child's apex NS RRset and the parent's delegation NS RRset, then the responses received from forwarding the triggering query to the parent's delegated nameservers should be discarded after validation, and this query should be forwarded again to the child's apex nameservers.</t>
</list></t>

</section>
<section anchor="upgrade-addresses"><name>Upgrading A and AAAA RRset Credibility</name>
<t>Authoritative responses for a zone's NS RRset at the apex can contain additional addresses.
A NS RRset validation response is such an example of such responses.
A priming response is another example of an authoritative zone's NS RRset response <xref target="RFC8109"/>.</t>

<t>Additional addresses in authoritative NS RRset responses SHOULD be validated if they are not already authoritatively in cache.
Only when such additional addresses are DNSSEC verifiable, (because the complete RRset is included, including a verifiable signature for the RRset), such additional addresses can be cached authoritatively immediately without additional validation queries.
DNSSEC validation is enough validation in those cases.
Otherwise, the addresses cannot be assumed to be complete or even authoritatively present in the same zone, and additional validation queries SHOULD be made for these addresses.</t>

<t>Note that there may be outstanding address validation queries for the names of the authoritative NS RRset (from referral address validation queries).
In those cases no new validation queries need to be made.</t>

<t>Resolvers may choose to delay the response to a triggering query until it can be verified that the answer came from a name server listening on an authoritatively acquired address for an authoritatively acquired name.
This would offer the most trustworthy responses with the least risk for forgery or eavesdropping.</t>

</section>
<section anchor="revalidation"><name>Delegation Revalidation</name>

<t>The essence of this mechanism is re-validation of all delegation metadata that directly or indirectly supports an owner name in cache.
This requires a cache to remember the delegated name server names for each zone cut as received from the parent (delegating) zone's name servers, and also the TTL of that NS RRset, and the TTL of the associated DS RRset (if seen).</t>

<t>A delegation under re-validation is called a "re-validation point" and is "still valid" if its parent zone's servers still respond to an in-zone question with a referral to the re-validation point, and if that referral overlaps with the previously cached referral by at least one name server name, and the DS RRset (if seen) overlaps the previously cached DS RRset (if also seen) by at least one delegated signer.</t>

<t>If the response is not a referral or refers to a different zone than before, then the shape of the delegation hierarchy has changed.
If the response is a referral to the re-validation point but to a wholly novel NS RRset or a wholly novel DS RRset, then the authority for that zone has changed.
For clarity, this includes transitions between empty and non-empty DS RRsets.</t>

<t>If the shape of the delegation hierarchy or the authority for a zone has been found to change, then no currently cached data whose owner names are at or below that re-validation point can be used.
Such non-use can be by directed garbage collection or lazy generational garbage collection or some other method befitting the architecture of the cache.
What matters is that the cache behave as though this data was removed.</t>

<t>Since re-validation can discover changes in the shape of the delegation hierarchy it is more efficient to re-validate from the top (root) downward (to the owner name) since an upper level re-validation may obviate lower level re-validations.
What matters is that the supporting chain of delegations from the root to the owner name be demonstrably valid; further specifics are implementation details.</t>

<t>Re-validation is triggered when delegation meta-data has been cached for a period at most exceeding the delegating NS or DS (if seen) RRset TTL.
If the corresponding child zone's apex NS RRset TTL is smaller than the delegating NS RRset TTL, revalidation should happen at that interval instead.
However, resolvers should impose a sensitive minimum TTL floor they are willing to endure to avoid potential computational DoS attacks inflicted by zones with very short TTLs.</t>

<t>In normal operations this meta-data can be quickly re-validated with no further work.
However, when re-delegation or take-down occurs, a re-validating cache will discover this within one delegation TTL period, allowing the rapid expulsion of old data from the cache.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document includes no request to IANA.</t>

</section>
<section anchor="Security"><name>Security Considerations</name>
<t>In <xref target="DNS-CACHE-INJECTIONS"/> an overview is given of 18 cache poisoning attacks from which 13 can be remedied with delegation revalidation.
The paper provides recommendations for handling records in DNS response with respect to an earlier version of the idea presented in this document<xref target="I-D.wijngaards-dnsext-resolver-side-mitigation"/>.</t>

<t>Referral response NS RRsets and glue, and the additional addresses from authoritative NS RRset responses (such as the root priming response), are not protected with DNSSEC signatures.
An attacker that is able to alter the unsigned A and AAAA RRsets in the additional section of referral and authoritative NS RRset responses, can fool a resolver into taking addresses under the control of the attacker to be authoritative for the zone.
Such an attacker can redirect all traffic to the zone (of the referral or authoritative NS RRset response) to a rogue name server.</t>

<t>A rogue name server can view all queries from the resolver to that zone and alter all unsigned parts of responses, such as the parent side NS RRsets and glue of further referral responses.
Resolvers following referrals from a rogue name server, that do not revalidate those referral responses, can subsequently be fooled into taking addresses under the control of the attacker to be authoritative for those delegations as well.
The higher up the DNS tree, the more impact such an attack has.
In case of non DNSSEC validating resolvers, an attacker controlling a rogue name server for the root has potentially complete control over the entire domain name space and can alter all unsigned parts undetected.</t>

<t>Revalidating referral and authoritative NS RRsets responses enables to defend against the above described attack with DNSSEC signed infrastructure RRsets.
Unlike cache poisoning defences that leverage increase entropy to protect the transaction, revalidation of NS RRsets and addresses also provides protection against on-path attacks.</t>

<t><xref target="upgrade-ns">Upgrading NS RRset Credibility</xref> allows resolvers to cache and utilize the authoritative child apex NS RRset in preference to the non-authoritative parent NS RRset.
However, it is important to implement the steps described in <xref target="revalidation">Delegation Revalidation</xref> at the expiration of the parent's delegating TTL.
Otherwise, the operator of a malicious child zone, originally delegated to, but subsequently delegated away from, can cause resolvers that refresh TTLs on subsequent NS set queries, or that pre-fetch NS queries, to never learn of the redelegated zone.</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">

&RFC1034;
&RFC1035;
&RFC2181;
&RFC8109;


    </references>

    <references title='Informative References' anchor="sec-informative-references">

&I-D.vixie-dnsext-resimprove;
&I-D.wijngaards-dnsext-resolver-side-mitigation;
<reference anchor="GHOST1" target="https://www.ndss-symposium.org/ndss2012/">
  <front>
    <title>Ghost Domain Names: Revoked Yet Still Resolvable</title>
    <author initials="J." surname="Jiang" fullname="J Jiang">
      <organization></organization>
    </author>
    <author initials="J." surname="Liang" fullname="J Liang">
      <organization></organization>
    </author>
    <author initials="K." surname="Li" fullname="K Li">
      <organization></organization>
    </author>
    <author initials="J." surname="Li" fullname="J Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="H Duan">
      <organization></organization>
    </author>
    <author initials="J." surname="Wu" fullname="J Wu">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="GHOST2" target="https://www.ndss-symposium.org/ndss-paper/ghost-domain-reloaded-vulnerable-links-in-domain-name-delegation-and-revocation/">
  <front>
    <title>Ghost Domain Reloaded: Vulnerable Links in Domain Name Delegation and Revocation</title>
    <author initials="X." surname="Li" fullname="Xiang Li">
      <organization></organization>
    </author>
    <author initials="B." surname="Liu" fullname="Baojun Liu">
      <organization></organization>
    </author>
    <author initials="X." surname="Bai" fullname="Xuesong Bai">
      <organization></organization>
    </author>
    <author initials="M." surname="Zhang" fullname="Mingming Zhang">
      <organization></organization>
    </author>
    <author initials="Q." surname="Zhang" fullname="Qifan Zhang">
      <organization></organization>
    </author>
    <author initials="Z." surname="Li" fullname="Zhou Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="Haixin Duan">
      <organization></organization>
    </author>
    <author initials="Q." surname="Li" fullname="Qi Li">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DNS-CACHE-INJECTIONS" target="https://ieeexplore.ieee.org/abstract/document/8057202">
  <front>
    <title>Internet-Wide Study of DNS Cache Injections</title>
    <author initials="A." surname="Klein" fullname="Amit Klein">
      <organization></organization>
    </author>
    <author initials="H." surname="Shulman" fullname="Haya Shulman">
      <organization></organization>
    </author>
    <author initials="M." surname="Waidner" fullname="Michael Waidner">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<?line 273?>

<section anchor="Acknowledgements"><name>Acknowledgements</name>

<t>Wouter Wijngaards proposed explicitly obtaining authoritative child NS data in <xref target="I-D.wijngaards-dnsext-resolver-side-mitigation"/>.
This behavior has been implemented in the Unbound DNS resolver via the "harden-referral-path" option.
The combination of child NS fetch and revalidating the child delegation was originally proposed in <xref target="I-D.vixie-dnsext-resimprove"/>, by Paul Vixie, Rodney Joffe, and Frederico Neves.</t>

<t>The authors would like to thank Ralph Dolmans who was an early collaborator on this work, as well as the many members of the IETF DNS Operations Working Group for helpful comments and discussion.</t>

</section>
<section anchor="implementation-status"><name>Implementation status</name>

<t><strong>Note to the RFC Editor</strong>: please remove this entire appendix before publication.</t>

<t><list style="symbols">
  <t>The Knot Resolver software revalidates the priming response as part of priming the root zone since version 1.5.1 (released December 12, 2017)</t>
  <t>The Unbound resolver software has delegation revalidation as described in this document implemented since version 1.1 (released August 29, 2008).
It is enabled with a configuration option <spanx style="verb">harden-referral-path: yes</spanx> which is disabled by default.  <vspace blankLines='1'/>
"Redhat Enterprise Linux has been running Unbound with the <spanx style="verb">harden-referral-path:</spanx> option set to <spanx style="verb">yes</spanx> for years without problems", as mentioned by Paul Wouters during dnsop workgroup session at the IETF 119.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

