<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.17 (Ruby 3.2.3) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC1034 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC8109 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8109.xml">
<!ENTITY RFC9567 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.9567.xml">
<!ENTITY RFC8914 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8914.xml">
<!ENTITY I-D.vixie-dnsext-resimprove SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.vixie-dnsext-resimprove.xml">
<!ENTITY I-D.wijngaards-dnsext-resolver-side-mitigation SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.wijngaards-dnsext-resolver-side-mitigation.xml">
]>


<rfc ipr="trust200902" docName="draft-ietf-dnsop-ns-revalidation-07" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="DNS Delegation Revalidation">Delegation Revalidation by DNS Resolvers</title>

    <author initials="S." surname="Huque" fullname="Shumon Huque">
      <organization>Salesforce</organization>
      <address>
        <email>shuque@gmail.com</email>
      </address>
    </author>
    <author initials="P." surname="Vixie" fullname="Paul Vixie">
      <organization>SIE Europe, U.G.</organization>
      <address>
        <email>paul@redbarn.org</email>
      </address>
    </author>
    <author initials="W." surname="Toorop" fullname="Willem Toorop">
      <organization>NLnet Labs</organization>
      <address>
        <postal>
          <street>Science Park 400</street>
          <city>Amsterdam</city>
          <code>1098 XH</code>
          <country>Netherlands</country>
        </postal>
        <email>willem@nlnetlabs.nl</email>
      </address>
    </author>

    <date year="2024" month="June" day="24"/>

    <area>Operations and Management Area</area>
    <workgroup>Domain Name System Operations</workgroup>
    <keyword>Internet-Draft</keyword> <keyword>DNS</keyword> <keyword>Resolver</keyword> <keyword>Delegation</keyword> <keyword>Revalidation</keyword> <keyword>Authoritative</keyword> <keyword>Name Server Record</keyword> <keyword>NS</keyword> <keyword>Parent</keyword> <keyword>Child</keyword> <keyword>Resource Record Set</keyword>

    <abstract>


<?line 127?>

<t>This document recommends improved DNS <xref target="RFC1034"/> <xref target="RFC1035"/> resolver behavior with respect to the processing of Name Server (NS) resource record sets (RRset) during iterative resolution.
When following a referral response from an authoritative server to a child zone, DNS resolvers should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
The (A and AAAA) address RRsets in the additional section from referral responses and authoritative NS answers for the names of the NS RRset, should similarly be re-queried and used to replace the entries with the lower trustworthiness ranking in cache.
Resolvers should also periodically revalidate the child delegation by re-querying the parent zone at the expiration of the TTL of the parent side NS RRset.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-dnsop-ns-revalidation/"/>.
      </t>
      <t>
        Discussion of this document takes place on the
        DNSOP Working Group mailing list (<eref target="mailto:dnsop@ietf.org"/>),
        which is archived at <eref target="https://mailarchive.ietf.org/arch/browse/dnsop/"/>.
        Subscribe at <eref target="https://www.ietf.org/mailman/listinfo/dnsop/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/shuque/ns-revalidation"/>.</t>
    </note>


  </front>

  <middle>


<?line 134?>

<section anchor="into"><name>Introduction</name>

<t>This document recommends improved DNS resolver behavior with respect to the processing of NS record sets during iterative resolution.
The first recommendation is that resolvers, when following a referral response from an authoritative server to a child zone, should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
The address records in the additional section from the referral response (as glue) or authoritative NS response that match the names of the NS RRset should similarly be required if they are cached non-authoritatively.
The authoritative answers from those queries should replace the cached non-authoritative A and AAAA RRsets.
The second recommendation is to revalidate the delegation by re-querying the parent zone at the expiration of the TTL of the parent side NS RRset.</t>

</section>
<section anchor="motivation"><name>Motivation</name>

<t>There is wide variability in the behavior of deployed DNS resolvers today with respect to how they process delegation records.
Some of them prefer the parent NS set, some prefer the child, and for others, what they preferentially cache depends on the dynamic state of queries and responses they have processed.
This document aims to bring more commonality and predictability by standardizing the behavior in a way that comports with the DNS protocol.
Another goal is to improve DNS security.</t>

<t>The delegation NS RRset at the bottom of the parent zone and the apex NS RRset in the child zone are unsynchronized in the DNS protocol.
<xref target="RFC1034"/> Section 4.2.2 says "The administrators of both zones should insure that the NS and glue RRs which mark both sides of the cut are consistent and remain so.".
But for a variety of reasons they could not be.
Officially, a child zone's apex NS RRset is authoritative and thus has a higher cache credibility than the parent's delegation NS RRset, which is non-authoritative glue <xref target="RFC2181"/>, Section 5.4.1. "Ranking data", and Section 6.1. "Zone authority").
Hence the NS RRset "below the zone cut" should immediately replace the parent's delegating NS RRset in cache when an iterative caching DNS resolver crosses a zone boundary.
However, this can only happen if (1) the resolver receives the authoritative NS RRset in the Authority section of a response from the child zone, which is not mandatory, or (2) if the resolver explicitly issues an NS RRset query to the child zone as part of its iterative resolution algorithm.
In the absence of this, it is possible for an iterative caching resolver to never learn the authoritative NS RRset for a zone, unless a downstream client of the resolver explicitly issues such an NS query, which is not something that normal enduser applications do, and thus cannot be relied upon to occur with any regularity.</t>

<t>Increasingly, there is a trend towards minimizing unnecessary data in DNS responses.
Several popular DNS implementations default to such a configuration (see "minimal-responses" in BIND and NSD).
So, they may never include the authoritative NS RRset in the Authority section of their responses.</t>

<t>A common reason that zone owners want to ensure that resolvers place the authoritative NS RRset preferentially in their cache is that the TTLs may differ between the parent and child side of the zone cut.
Some DNS Top Level Domains (TLDs) only support long fixed TTLs in their delegation NS sets.
This inhibits a child zone owner's ability to make more rapid changes to their nameserver configuration using a shorter TTL, if resolvers have no systematic mechanism to observe and cache the child NS RRset.</t>

<t>Similarly, a child zone owner may also choose to have longer TTLs in their delegation NS sets and address records to decrease the attack window for cache poisoning attacks.
For example, at the time of writing, root-servers.net has a TTL of 6 weeks for the root server identifier address records, where the TTL in the priming response is 6 days.</t>

<t>A child zone's delegation still needs to be periodically revalidated at the parent to make sure that the parent zone has not legitimately re-delegated the zone to a different set of nameservers, or even removed the delegation.
Otherwise, resolvers that refresh the TTL of a child NS RRset on subsequent queries or due to pre-fetching, may cling to those nameservers long after they have been re-delegated elsewhere.
This leads to the second recommendation in this document, "Delegation Revalidation" - Resolvers should record the TTL of the parent's delegating NS RRset, and use it to trigger a revalidation action.
Attacks exploiting lack of this revalidation have been described in <xref target="GHOST1"/>, <xref target="GHOST2"/>.</t>

</section>
<section anchor="upgrade-ns"><name>Upgrading NS RRset Credibility</name>

<t><list style="symbols">
  <t>When a referral response is received during iteration, a validation query should be sent in parallel with the resolution of the triggering query, to the delegated nameservers for the newly discovered zone cut.
Note that validating resolvers today, when following a secure referral, already need to dispatch a query to the delegated nameservers for the DNSKEY RRset, so this validation query could be sent in parallel with that DNSKEY query.</t>
  <t>A validation query consists of a query for the child's apex NS RRset, sent to the newly discovered delegation's nameservers.
Normal iterative logic applies to the processing of responses to validation queries, including storing the results in cache, trying the next server on SERVFAIL or timeout, and so on.
Positive responses to this validation query will be cached with an authoritative data ranking.
Successive queries directed to the same zone will be directed to the nameservers listed in the child's apex, due to the ranking of this answer.
If the validation query fails, the parent NS RRset will remain the one with the highest ranking and will be used for successive queries.</t>
</list></t>

<ul empty="true"><li>
  <t>When a resolver detects that the child's apex NS RRset contains different nameservers than the non-authoritative version at the parent side of the zone cut, it MAY report the mismatch using DNS Error Reporting <xref target="RFC9567"/> on the Report-Channel for the child zone, as well as on the Report-Channel for the parent zone, with an extended DNS error code of TBD (see <xref target="IANA"/>).</t>
</li></ul>

<t><list style="symbols">
  <t>Additional validation queries for the "glue" resource records of referral responses (if not already authoritatively present in cache) may be sent with the validation query for the NS RRset as well.
Positive responses will be cached authoritatively and replace the non authoritative "glue" entries.
Successive queries directed to the same zone will be directed to the authoritative values for the names of the NS RRset in the referral response.</t>
  <t>The names from the NS RRset from a validating NS query may differ from the names in NS RRset in the referral response.
Outstanding validation queries for "glue" that do not match names in the authoritative NS RRset be discarded, or they may be left running to completion.
Their result will no longer be used in queries for the zone.
Outstanding validation queries for "glue" that do match names in the authoritative NS RRset must be left running to completion.
They do not need to be re-queried after reception of the authoritative NS RRset (see <xref target="upgrade-addresses"></xref>).</t>
  <t>Resolvers may choose to delay the response to the triggering query until both the triggering query and the validation query have been answered.
In practice, we expect many implementations may answer the triggering query in advance of the validation query for performance reasons.
An additional reason is that there are unfortunately a number of nameservers in the field that (incorrectly) fail to properly answer explicit queries for zone apex NS records, and thus the revalidation logic may need to be applied lazily and opportunistically to deal with them.
In cases where the delegated nameservers respond incorrectly to an NS query, the resolver should abandon this algorithm for the zone in question and fall back to using only the information from the parent's referral response.</t>
  <t>If the resolver chooses to delay the response, and there are no nameserver names in common between the child's apex NS RRset and the parent's delegation NS RRset, then the responses received from forwarding the triggering query to the parent's delegated nameservers should be discarded after validation, and this query should be forwarded again to the child's apex nameservers.</t>
</list></t>

</section>
<section anchor="upgrade-addresses"><name>Upgrading A and AAAA RRset Credibility</name>
<t>Authoritative responses for a zone's NS RRset at the apex can contain additional addresses.
A NS RRset validation response is such an example of such responses.
A priming response is another example of an authoritative zone's NS RRset response <xref target="RFC8109"/>.</t>

<t>Additional addresses in authoritative NS RRset responses SHOULD be validated if they are not already authoritatively in cache.
Only when such additional addresses are DNSSEC verifiable, (because the complete RRset is included, including a verifiable signature for the RRset), such additional addresses can be cached authoritatively immediately without additional validation queries.
DNSSEC validation is enough validation in those cases.
Otherwise, the addresses cannot be assumed to be complete or even authoritatively present in the same zone, and additional validation queries SHOULD be made for these addresses.</t>

<t>Note that there may be outstanding address validation queries for the names of the authoritative NS RRset (from referral address validation queries).
In those cases no new validation queries need to be made.</t>

<t>Resolvers may choose to delay the response to a triggering query until it can be verified that the answer came from a name server listening on an authoritatively acquired address for an authoritatively acquired name.
This would offer the most trustworthy responses with the least risk for forgery or eavesdropping.</t>

</section>
<section anchor="revalidation"><name>Delegation Revalidation</name>

<t>The essence of this mechanism is re-validation of all delegation metadata that directly or indirectly supports an owner name in cache.
This requires a cache to remember the delegated name server names for each zone cut as received from the parent (delegating) zone's name servers, and also the TTL of that NS RRset, and the TTL of the associated DS RRset (if seen).</t>

<t>A delegation under re-validation is called a "re-validation point" and is "still valid" if its parent zone's servers still respond to an in-zone question with a referral to the re-validation point, and if that referral overlaps with the previously cached referral by at least one name server name, and the DS RRset (if seen) overlaps the previously cached DS RRset (if also seen) by at least one delegated signer.</t>

<t>If the response is not a referral or refers to a different zone than before, then the shape of the delegation hierarchy has changed.
If the response is a referral to the re-validation point but to a wholly novel NS RRset or a wholly novel DS RRset, then the authority for that zone has changed.
For clarity, this includes transitions between empty and non-empty DS RRsets.</t>

<t>If the shape of the delegation hierarchy or the authority for a zone has been found to change, then no currently cached data whose owner names are at or below that re-validation point can be used.
Such non-use can be by directed garbage collection or lazy generational garbage collection or some other method befitting the architecture of the cache.
What matters is that the cache behave as though this data was removed.</t>

<t>Since re-validation can discover changes in the shape of the delegation hierarchy it is more efficient to re-validate from the top (root) downward (to the owner name) since an upper level re-validation may obviate lower level re-validations.
What matters is that the supporting chain of delegations from the root to the owner name be demonstrably valid; further specifics are implementation details.</t>

<t>Re-validation is triggered when delegation meta-data has been cached for a period at most exceeding the delegating NS or DS (if seen) RRset TTL.
If the corresponding child zone's apex NS RRset TTL is smaller than the delegating NS RRset TTL, revalidation should happen at that interval instead.
However, resolvers should impose a sensitive minimum TTL floor they are willing to endure to avoid potential computational DoS attacks inflicted by zones with very short TTLs.</t>

<t>In normal operations this meta-data can be quickly re-validated with no further work.
However, when re-delegation or take-down occurs, a re-validating cache will discover this within one delegation TTL period, allowing the rapid expulsion of old data from the cache.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>IANA is requested to assign a value to the "Extended DNS Error Codes" registry <xref target="RFC8914"/>.</t>

<texttable>
      <ttcol align='left'>INFO-CODE</ttcol>
      <ttcol align='left'>Purpose</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>TBD</c>
      <c>referral NS RRset mismatch</c>
      <c>[this document]</c>
</texttable>

</section>
<section anchor="Security"><name>Security Considerations</name>
<t>In <xref target="DNS-CACHE-INJECTIONS"/> an overview is given of 18 cache poisoning attacks from which 13 can be remedied with delegation revalidation.
The paper provides recommendations for handling records in DNS response with respect to an earlier version of the idea presented in this document <xref target="I-D.wijngaards-dnsext-resolver-side-mitigation"/>.</t>

<t>Referral response NS RRsets and glue, and the additional addresses from authoritative NS RRset responses (such as the root priming response), are not protected with DNSSEC signatures.
An attacker that is able to alter the unsigned A and AAAA RRsets in the additional section of referral and authoritative NS RRset responses, can fool a resolver into taking addresses under the control of the attacker to be authoritative for the zone.
Such an attacker can redirect all traffic to the zone (of the referral or authoritative NS RRset response) to a rogue name server.</t>

<t>A rogue name server can view all queries from the resolver to that zone and alter all unsigned parts of responses, such as the parent side NS RRsets and glue of further referral responses.
Resolvers following referrals from a rogue name server, that do not revalidate those referral responses, can subsequently be fooled into taking addresses under the control of the attacker to be authoritative for those delegations as well.
The higher up the DNS tree, the more impact such an attack has.
In case of non DNSSEC validating resolvers, an attacker controlling a rogue name server for the root has potentially complete control over the entire domain name space and can alter all unsigned parts undetected.</t>

<t>Revalidating referral and authoritative NS RRsets responses enables to defend against the above described attack with DNSSEC signed infrastructure RRsets.
Unlike cache poisoning defences that leverage increase entropy to protect the transaction, revalidation of NS RRsets and addresses also provides protection against on-path attacks.</t>

<t><xref target="upgrade-ns">Upgrading NS RRset Credibility</xref> allows resolvers to cache and utilize the authoritative child apex NS RRset in preference to the non-authoritative parent NS RRset.
However, it is important to implement the steps described in <xref target="revalidation">Delegation Revalidation</xref> at the expiration of the parent's delegating TTL.
Otherwise, the operator of a malicious child zone, originally delegated to, but subsequently delegated away from, can cause resolvers that refresh TTLs on subsequent NS set queries, or that pre-fetch NS queries, to never learn of the redelegated zone.</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">

&RFC1034;
&RFC1035;
&RFC2181;
&RFC8109;
&RFC9567;
&RFC8914;


    </references>

    <references title='Informative References' anchor="sec-informative-references">

&I-D.vixie-dnsext-resimprove;
&I-D.wijngaards-dnsext-resolver-side-mitigation;
<reference anchor="GHOST1" target="https://www.ndss-symposium.org/ndss2012/">
  <front>
    <title>Ghost Domain Names: Revoked Yet Still Resolvable</title>
    <author initials="J." surname="Jiang" fullname="J Jiang">
      <organization></organization>
    </author>
    <author initials="J." surname="Liang" fullname="J Liang">
      <organization></organization>
    </author>
    <author initials="K." surname="Li" fullname="K Li">
      <organization></organization>
    </author>
    <author initials="J." surname="Li" fullname="J Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="H Duan">
      <organization></organization>
    </author>
    <author initials="J." surname="Wu" fullname="J Wu">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="GHOST2" target="https://www.ndss-symposium.org/ndss-paper/ghost-domain-reloaded-vulnerable-links-in-domain-name-delegation-and-revocation/">
  <front>
    <title>Ghost Domain Reloaded: Vulnerable Links in Domain Name Delegation and Revocation</title>
    <author initials="X." surname="Li" fullname="Xiang Li">
      <organization></organization>
    </author>
    <author initials="B." surname="Liu" fullname="Baojun Liu">
      <organization></organization>
    </author>
    <author initials="X." surname="Bai" fullname="Xuesong Bai">
      <organization></organization>
    </author>
    <author initials="M." surname="Zhang" fullname="Mingming Zhang">
      <organization></organization>
    </author>
    <author initials="Q." surname="Zhang" fullname="Qifan Zhang">
      <organization></organization>
    </author>
    <author initials="Z." surname="Li" fullname="Zhou Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="Haixin Duan">
      <organization></organization>
    </author>
    <author initials="Q." surname="Li" fullname="Qi Li">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DNS-CACHE-INJECTIONS" target="https://ieeexplore.ieee.org/abstract/document/8057202">
  <front>
    <title>Internet-Wide Study of DNS Cache Injections</title>
    <author initials="A." surname="Klein" fullname="Amit Klein">
      <organization></organization>
    </author>
    <author initials="H." surname="Shulman" fullname="Haya Shulman">
      <organization></organization>
    </author>
    <author initials="M." surname="Waidner" fullname="Michael Waidner">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<?line 283?>

<section anchor="Acknowledgements"><name>Acknowledgements</name>

<t>Wouter Wijngaards proposed explicitly obtaining authoritative child NS data in <xref target="I-D.wijngaards-dnsext-resolver-side-mitigation"/>.
This behavior has been implemented in the Unbound DNS resolver via the "harden-referral-path" option.
The combination of child NS fetch and revalidating the child delegation was originally proposed in <xref target="I-D.vixie-dnsext-resimprove"/>, by Paul Vixie, Rodney Joffe, and Frederico Neves.</t>

<t>The authors would like to thank Ralph Dolmans who was an early collaborator on this work, as well as the many members of the IETF DNS Operations Working Group for helpful comments and discussion.</t>

</section>
<section anchor="implementation-status"><name>Implementation status</name>

<t><strong>Note to the RFC Editor</strong>: please remove this entire appendix before publication.</t>

<t><list style="symbols">
  <t>The Knot Resolver software revalidates the priming response as part of priming the root zone since version 1.5.1 (released December 12, 2017)</t>
  <t>The Unbound resolver software has delegation revalidation as described in this document implemented since version 1.1 (released August 29, 2008).
It is enabled with a configuration option <spanx style="verb">harden-referral-path: yes</spanx> which is disabled by default.  <vspace blankLines='1'/>
"Redhat Enterprise Linux has been running Unbound with the <spanx style="verb">harden-referral-path:</spanx> option set to <spanx style="verb">yes</spanx> for years without problems", as mentioned by Paul Wouters during dnsop workgroup session at the IETF 119.</t>
</list></t>

</section>


  </back>

<!-- ##markdown-source:
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
JfypGJBSAAA=

-->

</rfc>

