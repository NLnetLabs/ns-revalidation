<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.7 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC1034 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC8109 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8109.xml">
<!ENTITY I-D.vixie-dnsext-resimprove SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.vixie-dnsext-resimprove.xml">
<!ENTITY I-D.wijngaards-dnsext-resolver-side-mitigation SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.wijngaards-dnsext-resolver-side-mitigation.xml">
]>


<rfc ipr="trust200902" docName="draft-ietf-dnsop-ns-revalidation-05" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="DNS Delegation Revalidation">Delegation Revalidation by DNS Resolvers</title>

    <author initials="S." surname="Huque" fullname="Shumon Huque">
      <organization>Salesforce</organization>
      <address>
        <email>shuque@gmail.com</email>
      </address>
    </author>
    <author initials="P." surname="Vixie" fullname="Paul Vixie">
      <organization>SIE Europe, U.G.</organization>
      <address>
        <email>paul@redbarn.org</email>
      </address>
    </author>
    <author initials="W." surname="Toorop" fullname="Willem Toorop">
      <organization>NLnet Labs</organization>
      <address>
        <postal>
          <street>Science Park 400</street>
          <city>Amsterdam</city>
          <code>1098 XH</code>
          <country>Netherlands</country>
        </postal>
        <email>willem@nlnetlabs.nl</email>
      </address>
    </author>

    <date year="2024" month="March" day="18"/>

    <area>Operations and Management Area</area>
    <workgroup>Domain Name System Operations</workgroup>
    <keyword>Internet-Draft</keyword> <keyword>DNS</keyword> <keyword>Resolver</keyword> <keyword>Delegation</keyword> <keyword>Revalidation</keyword> <keyword>Authoritative</keyword> <keyword>Name Server Record</keyword> <keyword>NS</keyword> <keyword>Parent</keyword> <keyword>Child</keyword> <keyword>Resource Record Set</keyword>

    <abstract>


<?line 113?>

<t>This document recommends improved DNS <xref target="RFC1034"/> <xref target="RFC1035"/> resolver behavior with respect to the processing of Name Server (NS) resource record sets (RRset) during iterative resolution.
When following a referral response from an authoritative server to a child zone, DNS resolvers should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
The (A and AAAA) address RRsets in the additional section from referral responses and authoritative NS answers for the names of the NS RRset, should similarly be re-queried and used to replace the entries with the lower trustworthiness ranking in cache.
Resolvers should also periodically revalidate the child delegation by re-querying the parent zone at the expiration of the TTL of the parent side NS RRset.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-dnsop-ns-revalidation/"/>.
      </t>
      <t>
        Discussion of this document takes place on the
        DNSOP Working Group mailing list (<eref target="mailto:dnsop@ietf.org"/>),
        which is archived at <eref target="https://mailarchive.ietf.org/arch/browse/dnsop/"/>.
        Subscribe at <eref target="https://www.ietf.org/mailman/listinfo/dnsop/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/shuque/ns-revalidation"/>.</t>
    </note>


  </front>

  <middle>


<?line 120?>

<section anchor="into"><name>Introduction</name>

<t>This document recommends improved DNS resolver behavior with respect to the processing of NS record sets during iterative resolution.
The first recommendation is that resolvers, when following a referral response from an authoritative server to a child zone, should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
The address records in the additional section from the referral response (as glue) or authoritative NS response that match the names of the NS RRset should similarly be required if they are cached non-authoritatively.
The authoritative answers from those queries should replace the cached non-authoritative A and AAAA RRsets.
The second recommendation is to revalidate the delegation by re-querying the parent zone at the expiration of the TTL of the parent side NS RRset.</t>

</section>
<section anchor="motivation"><name>Motivation</name>

<t>There is wide variability in the behavior of deployed DNS resolvers today with respect to how they process delegation records.
Some of them prefer the parent NS set, some prefer the child, and for others, what they preferentially cache depends on the dynamic state of queries and responses they have processed.
This document aims to bring more commonality and predictability by standardizing the behavior in a way that comports with the DNS protocol.</t>

<t>The delegation NS RRset at the bottom of the parent zone and the apex NS RRset in the child zone are unsynchronized in the DNS protocol.
<xref target="RFC1034"/> Section 4.2.2 says "The administrators of both zones should insure that the NS and glue RRs which mark both sides of the cut are consistent and remain so.".
But for a variety of reasons they could not be.
Officially, a child zone's apex NS RRset is authoritative and thus has a higher cache credibility than the parent's delegation NS RRset, which is non-authoritative glue <xref target="RFC2181"/>, Section 5.4.1. "Ranking data", and Section 6.1. "Zone authority").
Hence the NS RRset "below the zone cut" should immediately replace the parent's delegating NS RRset in cache when an iterative caching DNS resolver crosses a zone boundary.
However, this can only happen if (1) the resolver receives the authoritative NS RRset in the Authority section of a response from the child zone, which is not mandatory, or (2) if the resolver explicitly issues an NS RRset query to the child zone as part of its iterative resolution algorithm.
In the absence of this, it is possible for an iterative caching resolver to never learn the authoritative NS RRset for a zone, unless a downstream client of the resolver explicitly issues such an NS query, which is not something that normal enduser applications do, and thus cannot be relied upon to occur with any regularity.</t>

<t>Increasingly, there is a trend towards minimizing unnecessary data in DNS responses.
Several popular DNS implementations default to such a configuration (see "minimal-responses" in BIND and NSD).
So, they may never include the authoritative NS RRset in the Authority section of their responses.</t>

<t>A common reason that zone owners want to ensure that resolvers place the authoritative NS RRset preferentially in their cache is that the TTLs may differ between the parent and child side of the zone cut.
Some DNS Top Level Domains (TLDs) only support long fixed TTLs in their delegation NS sets.
This inhibits a child zone owner's ability to make more rapid changes to their nameserver configuration using a shorter TTL, if resolvers have no systematic mechanism to observe and cache the child NS RRset.<cref anchor="_1">The other way around is also possible. A zone owner may prefer to have longer TTLs than the referral; for example root-servers.net.</cref></t>

<t>{Willem}</t>

<t>A child zone's delegation still needs to be periodically revalidated at the parent to make sure that the parent zone has not legitimately re-delegated the zone to a different set of nameservers, or even removed the delegation.
Otherwise, resolvers that refresh the TTL of a child NS RRset on subsequent queries or due to pre-fetching, may cling to those nameservers long after they have been re-delegated elsewhere.
This leads to the second recommendation in this document, "Delegation Revalidation" - Resolvers should record the TTL of the parent's delegating NS RRset, and use it to trigger a revalidation action.
Attacks exploiting lack of this revalidation have been described in <xref target="GHOST1"/>, <xref target="GHOST2"/>.</t>

</section>
<section anchor="upgrade-ns"><name>Upgrading NS RRset Credibility</name>

<t><list style="symbols">
  <t>When a referral response is received during iteration, a validation query should be sent in parallel with the resolution of the triggering query, to the delegated nameservers for the newly discovered zone cut.
Note that validating resolvers today, when following a secure referral, already need to dispatch a query to the delegated nameservers for the DNSKEY RRset, so this validation query could be sent in parallel with that DNSKEY query.</t>
  <t>A validation query consists of a query for the child's apex NS RRset, sent to the newly discovered delegation's nameservers.
Normal iterative logic applies to the processing of responses to validation queries, including storing the results in cache, trying the next server on SERVFAIL or timeout, and so on.
Positive responses to this validation query will be cached with an authoritative data ranking.
Successive queries directed to the same zone will be directed to the nameservers listed in the child's apex, due to the ranking of this answer.
If the validation query fails, the parent NS RRset will remain the one with the highest ranking and will be used for successive queries.</t>
  <t>Additional validation queries for the "glue" resource records of referral responses (if not already authoritatively present in cache) may be sent with the validation query for the NS RRset as well.
Positive responses will be cached authoritatively and replace the non authoritative "glue" entries.
Successive queries directed to the same zone will be directed to the authoritative values for the names of the NS RRset in the referral response.</t>
  <t>The names from the NS RRset from a validating NS query may differ from the names in NS RRset in the referral response.
Outstanding validation queries for "glue" that do not match names in the authoritative NS RRset be discarded, or they may be left running to completion.
Their result will no longer be used in queries for the zone.
Outstanding validation queries for "glue" that do match names in the authoritative NS RRset must be left running to completion.
They do not need to be re-queried after reception of the authoritative NS RRset (see <xref target="upgrade-addresses"></xref>).</t>
  <t>Resolvers may choose to delay the response to the triggering query until both the triggering query and the validation query have been answered.<cref anchor="_2">fwiw, I'm ok with completely dropping the last two items. Let's keep this simple.</cref>
In practice, we expect many implementations may answer the triggering query in advance of the validation query for performance reasons.
An additional reason is that there are unfortunately a number of nameservers in the field that (incorrectly) fail to properly answer explicit queries for zone apex NS records, and thus the revalidation logic may need to be applied lazily and opportunistically to deal with them.
In cases where the delegated nameservers respond incorrectly to an NS query, the resolver should abandon this algorithm for the zone in question and fall back to using only the information from the parent's referral response.</t>
  <t>If the resolver chooses to delay the response, and there are no nameserver names in common between the child's apex NS RRset and the parent's delegation NS RRset, then the responses received from forwarding the triggering query to the parent's delegated nameservers should be discarded after validation, and this query should be forwarded again to the child's apex nameservers.</t>
</list></t>

<t>{Ralph}</t>

</section>
<section anchor="upgrade-addresses"><name>Upgrading A and AAAA RRset Credibility</name>
<t>Authoritative responses for a zone's NS RRset at the apex can contain additional addresses.
A NS RRset validation response is such an example of such responses.
A priming response is another example of an authoritative zone's NS RRset response <xref target="RFC8109"/>.</t>

<t>Additional addresses in authoritative NS RRset responses SHOULD be validated if they are not already authoritatively in cache.
Only when such additional addresses are DNSSEC verifiable, (because the complete RRset is included, including a verifiable signature for the RRset), such additional addresses can be cached authoritatively immediately without additional validation queries.
DNSSEC validation is enough validation in those cases.
Otherwise, the addresses cannot be assumed to be complete or even authoritatively present in the same zone, and additional validation queries SHOULD be made for these addresses.</t>

<t>Note that there may be outstanding address validation queries for the names of the authoritative NS RRset (from referral address validation queries).
In those cases no new validation queries need to be made.</t>

<t>Resolvers may choose to delay the response to a triggering query until it can be verified that the answer came from a name server listening on an authoritatively acquired address for an authoritatively acquired name.
This would offer the most trustworthy responses with the least risk for forgery or eavesdropping.</t>

</section>
<section anchor="revalidation"><name>Delegation Revalidation</name>

<t>The essence of this mechanism is re-validation of all delegation metadata that directly or indirectly supports an owner name in cache.
This requires a cache to remember the delegated name server names for each zone cut as received from the parent (delegating) zone's name servers, and also the TTL of that NS RRset, and the TTL of the associated DS RRset (if seen).</t>

<t>A delegation under re-validation is called a "re-validation point" and is "still valid" if its parent zone's servers still respond to an in-zone question with a referral to the re-validation point, and if that referral overlaps with the previously cached referral by at least one name server name, and the DS RRset (if seen) overlaps the previously cached DS RRset (if also seen) by at least one delegated signer.</t>

<t>If the response is not a referral or refers to a different zone than before, then the shape of the delegation hierarchy has changed.
If the response is a referral to the re-validation point but to a wholly novel NS RRset or a wholly novel DS RRset, then the authority for that zone has changed.
For clarity, this includes transitions between empty and non-empty DS RRsets.</t>

<t>If the shape of the delegation hierarchy or the authority for a zone has been found to change, then no currently cached data whose owner names are at or below that re-validation point can be used.
Such non-use can be by directed garbage collection or lazy generational garbage collection or some other method befitting the architecture of the cache.
What matters is that the cache behave as though this data was removed.</t>

<t>Since re-validation can discover changes in the shape of the delegation hierarchy it is more efficient to re-validate from the top (root) downward (to the owner name) since an upper level re-validation may obviate lower level re-validations.
What matters is that the supporting chain of delegations from the root to the owner name be demonstrably valid; further specifics are implementation details.</t>

<t>Re-validation is triggered when delegation meta-data has been cached for a period at most exceeding the delegating NS or DS (if seen) RRset TTL.
If the corresponding child zone's apex NS RRset TTL is smaller than the delegating NS RRset TTL, revalidation should happen at that interval instead.
However, resolvers should impose a sensitive minimum TTL floor they are willing to endure to avoid potential computational DoS attacks inflicted by zones with very short TTLs.</t>

<t>In normal operations this meta-data can be quickly re-validated with no further work.
However, when re-delegation or take-down occurs, a re-validating cache will discover this within one delegation TTL period, allowing the rapid expulsion of old data from the cache.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document includes no request to IANA.</t>

</section>
<section anchor="Security"><name>Security Considerations</name>

<t><xref target="upgrade-ns">Upgrading NS RRset Credibility</xref> allows resolvers to cache and utilize the authoritative child apex NS RRset in preference to the non-authoritative parent NS RRset.
However, it is important to implement the steps described in <xref target="revalidation">Delegation Revalidation</xref> at the expiration of the parent's delegating TTL.
Otherwise, the operator of a malicious child zone, originally delegated to, but subsequently delegated away from, can cause resolvers that refresh TTLs on subsequent NS set queries, or that pre-fetch NS queries, to never learn of the redelegated zone.</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">

&RFC1034;
&RFC1035;
&RFC2181;
&RFC8109;


    </references>

    <references title='Informative References' anchor="sec-informative-references">

&I-D.vixie-dnsext-resimprove;
&I-D.wijngaards-dnsext-resolver-side-mitigation;
<reference anchor="GHOST1" target="https://www.ndss-symposium.org/ndss2012/">
  <front>
    <title>Ghost Domain Names: Revoked Yet Still Resolvable</title>
    <author initials="J." surname="Jiang" fullname="J Jiang">
      <organization></organization>
    </author>
    <author initials="J." surname="Liang" fullname="J Liang">
      <organization></organization>
    </author>
    <author initials="K." surname="Li" fullname="K Li">
      <organization></organization>
    </author>
    <author initials="J." surname="Li" fullname="J Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="H Duan">
      <organization></organization>
    </author>
    <author initials="J." surname="Wu" fullname="J Wu">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="GHOST2" target="https://www.ndss-symposium.org/ndss-paper/ghost-domain-reloaded-vulnerable-links-in-domain-name-delegation-and-revocation/">
  <front>
    <title>Ghost Domain Reloaded: Vulnerable Links in Domain Name Delegation and Revocation</title>
    <author initials="X." surname="Li" fullname="Xiang Li">
      <organization></organization>
    </author>
    <author initials="B." surname="Liu" fullname="Baojun Liu">
      <organization></organization>
    </author>
    <author initials="X." surname="Bai" fullname="Xuesong Bai">
      <organization></organization>
    </author>
    <author initials="M." surname="Zhang" fullname="Mingming Zhang">
      <organization></organization>
    </author>
    <author initials="Q." surname="Zhang" fullname="Qifan Zhang">
      <organization></organization>
    </author>
    <author initials="Z." surname="Li" fullname="Zhou Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="Haixin Duan">
      <organization></organization>
    </author>
    <author initials="Q." surname="Li" fullname="Qi Li">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<?line 250?>

<section anchor="Acknowledgements"><name>Acknowledgements</name>

<t>Wouter Wijngaards proposed explicitly obtaining authoritative child NS data in <xref target="I-D.wijngaards-dnsext-resolver-side-mitigation"/>.
This behavior has been implemented in the Unbound DNS resolver via the "harden-referral-path" option.
The combination of child NS fetch and revalidating the child delegation was originally proposed in <xref target="I-D.vixie-dnsext-resimprove"/>, by Vixie, Joffe, and Neves.</t>

</section>


  </back>

<!-- ##markdown-source:
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
FK2mGUIAAA==

-->

</rfc>

