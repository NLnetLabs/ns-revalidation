<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.7 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC1034 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1034.xml">
<!ENTITY RFC1035 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC8109 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8109.xml">
<!ENTITY I-D.vixie-dnsext-resimprove SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.vixie-dnsext-resimprove.xml">
<!ENTITY I-D.wijngaards-dnsext-resolver-side-mitigation SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.wijngaards-dnsext-resolver-side-mitigation.xml">
]>


<rfc ipr="trust200902" docName="draft-ietf-dnsop-ns-revalidation-05" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="DNS Delegation Revalidation">Delegation Revalidation by DNS Resolvers</title>

    <author initials="S." surname="Huque" fullname="Shumon Huque">
      <organization>Salesforce</organization>
      <address>
        <email>shuque@gmail.com</email>
      </address>
    </author>
    <author initials="P." surname="Vixie" fullname="Paul Vixie">
      <organization>SIE Europe, U.G.</organization>
      <address>
        <email>paul@redbarn.org</email>
      </address>
    </author>
    <author initials="W." surname="Toorop" fullname="Willem Toorop">
      <organization>NLnet Labs</organization>
      <address>
        <postal>
          <street>Science Park 400</street>
          <city>Amsterdam</city>
          <code>1098 XH</code>
          <country>Netherlands</country>
        </postal>
        <email>willem@nlnetlabs.nl</email>
      </address>
    </author>

    <date year="2024" month="March" day="18"/>

    <area>Operations and Management Area</area>
    <workgroup>Domain Name System Operations</workgroup>
    <keyword>Internet-Draft</keyword> <keyword>DNS</keyword> <keyword>Resolver</keyword> <keyword>Delegation</keyword> <keyword>Revalidation</keyword> <keyword>Authoritative</keyword> <keyword>Name Server Record</keyword> <keyword>NS</keyword> <keyword>Parent</keyword> <keyword>Child</keyword> <keyword>Resource Record Set</keyword>

    <abstract>


<?line 125?>

<t>This document recommends improved DNS <xref target="RFC1034"/> <xref target="RFC1035"/> resolver behavior with respect to the processing of Name Server (NS) resource record sets (RRset) during iterative resolution.
When following a referral response from an authoritative server to a child zone, DNS resolvers should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
The (A and AAAA) address RRsets in the additional section from referral responses and authoritative NS answers for the names of the NS RRset, should similarly be re-queried and used to replace the entries with the lower trustworthiness ranking in cache.
Resolvers should also periodically revalidate the child delegation by re-querying the parent zone at the expiration of the TTL of the parent side NS RRset.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-dnsop-ns-revalidation/"/>.
      </t>
      <t>
        Discussion of this document takes place on the
        DNSOP Working Group mailing list (<eref target="mailto:dnsop@ietf.org"/>),
        which is archived at <eref target="https://mailarchive.ietf.org/arch/browse/dnsop/"/>.
        Subscribe at <eref target="https://www.ietf.org/mailman/listinfo/dnsop/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/shuque/ns-revalidation"/>.</t>
    </note>


  </front>

  <middle>


<?line 132?>

<section anchor="into"><name>Introduction</name>

<t>This document recommends improved DNS resolver behavior with respect to the processing of NS record sets during iterative resolution.
The first recommendation is that resolvers, when following a referral response from an authoritative server to a child zone, should explicitly query the authoritative NS RRset at the apex of the child zone and cache this in preference to the NS RRset on the parent side of the zone cut.
The address records in the additional section from the referral response (as glue) or authoritative NS response that match the names of the NS RRset should similarly be required if they are cached non-authoritatively.
The authoritative answers from those queries should replace the cached non-authoritative A and AAAA RRsets.
The second recommendation is to revalidate the delegation by re-querying the parent zone at the expiration of the TTL of the parent side NS RRset.</t>

</section>
<section anchor="motivation"><name>Motivation</name>

<t>There is wide variability in the behavior of deployed DNS resolvers today with respect to how they process delegation records.
Some of them prefer the parent NS set, some prefer the child, and for others, what they preferentially cache depends on the dynamic state of queries and responses they have processed.
This document aims to bring more commonality and predictability by standardizing the behavior in a way that comports with the DNS protocol.
Another goal is to improve DNS security.</t>

<t>The delegation NS RRset at the bottom of the parent zone and the apex NS RRset in the child zone are unsynchronized in the DNS protocol.
<xref target="RFC1034"/> Section 4.2.2 says "The administrators of both zones should insure that the NS and glue RRs which mark both sides of the cut are consistent and remain so.".
But for a variety of reasons they could not be.
Officially, a child zone's apex NS RRset is authoritative and thus has a higher cache credibility than the parent's delegation NS RRset, which is non-authoritative glue <xref target="RFC2181"/>, Section 5.4.1. "Ranking data", and Section 6.1. "Zone authority").
Hence the NS RRset "below the zone cut" should immediately replace the parent's delegating NS RRset in cache when an iterative caching DNS resolver crosses a zone boundary.
However, this can only happen if (1) the resolver receives the authoritative NS RRset in the Authority section of a response from the child zone, which is not mandatory, or (2) if the resolver explicitly issues an NS RRset query to the child zone as part of its iterative resolution algorithm.
In the absence of this, it is possible for an iterative caching resolver to never learn the authoritative NS RRset for a zone, unless a downstream client of the resolver explicitly issues such an NS query, which is not something that normal enduser applications do, and thus cannot be relied upon to occur with any regularity.</t>

<t>Increasingly, there is a trend towards minimizing unnecessary data in DNS responses.
Several popular DNS implementations default to such a configuration (see "minimal-responses" in BIND and NSD).
So, they may never include the authoritative NS RRset in the Authority section of their responses.</t>

<t>A common reason that zone owners want to ensure that resolvers place the authoritative NS RRset preferentially in their cache is that the TTLs may differ between the parent and child side of the zone cut.
Some DNS Top Level Domains (TLDs) only support long fixed TTLs in their delegation NS sets.
This inhibits a child zone owner's ability to make more rapid changes to their nameserver configuration using a shorter TTL, if resolvers have no systematic mechanism to observe and cache the child NS RRset.</t>

<t><cref anchor="_1">The other way around is also possible. A zone owner may prefer to have longer TTLs than the referral; for example root-servers.net.</cref></t>

<t>A child zone's delegation still needs to be periodically revalidated at the parent to make sure that the parent zone has not legitimately re-delegated the zone to a different set of nameservers, or even removed the delegation.
Otherwise, resolvers that refresh the TTL of a child NS RRset on subsequent queries or due to pre-fetching, may cling to those nameservers long after they have been re-delegated elsewhere.
This leads to the second recommendation in this document, "Delegation Revalidation" - Resolvers should record the TTL of the parent's delegating NS RRset, and use it to trigger a revalidation action.
Attacks exploiting lack of this revalidation have been described in <xref target="GHOST1"/>, <xref target="GHOST2"/>.</t>

</section>
<section anchor="upgrade-ns"><name>Upgrading NS RRset Credibility</name>

<t><list style="symbols">
  <t>When a referral response is received during iteration, a validation query should be sent in parallel with the resolution of the triggering query, to the delegated nameservers for the newly discovered zone cut.
Note that validating resolvers today, when following a secure referral, already need to dispatch a query to the delegated nameservers for the DNSKEY RRset, so this validation query could be sent in parallel with that DNSKEY query.</t>
  <t>A validation query consists of a query for the child's apex NS RRset, sent to the newly discovered delegation's nameservers.
Normal iterative logic applies to the processing of responses to validation queries, including storing the results in cache, trying the next server on SERVFAIL or timeout, and so on.
Positive responses to this validation query will be cached with an authoritative data ranking.
Successive queries directed to the same zone will be directed to the nameservers listed in the child's apex, due to the ranking of this answer.
If the validation query fails, the parent NS RRset will remain the one with the highest ranking and will be used for successive queries.</t>
  <t>Additional validation queries for the "glue" resource records of referral responses (if not already authoritatively present in cache) may be sent with the validation query for the NS RRset as well.
Positive responses will be cached authoritatively and replace the non authoritative "glue" entries.
Successive queries directed to the same zone will be directed to the authoritative values for the names of the NS RRset in the referral response.</t>
  <t>The names from the NS RRset from a validating NS query may differ from the names in NS RRset in the referral response.
Outstanding validation queries for "glue" that do not match names in the authoritative NS RRset be discarded, or they may be left running to completion.
Their result will no longer be used in queries for the zone.
Outstanding validation queries for "glue" that do match names in the authoritative NS RRset must be left running to completion.
They do not need to be re-queried after reception of the authoritative NS RRset (see <xref target="upgrade-addresses"></xref>).</t>
  <t>Resolvers may choose to delay the response to the triggering query until both the triggering query and the validation query have been answered.
In practice, we expect many implementations may answer the triggering query in advance of the validation query for performance reasons.
An additional reason is that there are unfortunately a number of nameservers in the field that (incorrectly) fail to properly answer explicit queries for zone apex NS records, and thus the revalidation logic may need to be applied lazily and opportunistically to deal with them.
In cases where the delegated nameservers respond incorrectly to an NS query, the resolver should abandon this algorithm for the zone in question and fall back to using only the information from the parent's referral response.</t>
  <t>If the resolver chooses to delay the response, and there are no nameserver names in common between the child's apex NS RRset and the parent's delegation NS RRset, then the responses received from forwarding the triggering query to the parent's delegated nameservers should be discarded after validation, and this query should be forwarded again to the child's apex nameservers.</t>
</list></t>

</section>
<section anchor="upgrade-addresses"><name>Upgrading A and AAAA RRset Credibility</name>
<t>Authoritative responses for a zone's NS RRset at the apex can contain additional addresses.
A NS RRset validation response is such an example of such responses.
A priming response is another example of an authoritative zone's NS RRset response <xref target="RFC8109"/>.</t>

<t>Additional addresses in authoritative NS RRset responses SHOULD be validated if they are not already authoritatively in cache.
Only when such additional addresses are DNSSEC verifiable, (because the complete RRset is included, including a verifiable signature for the RRset), such additional addresses can be cached authoritatively immediately without additional validation queries.
DNSSEC validation is enough validation in those cases.
Otherwise, the addresses cannot be assumed to be complete or even authoritatively present in the same zone, and additional validation queries SHOULD be made for these addresses.</t>

<t>Note that there may be outstanding address validation queries for the names of the authoritative NS RRset (from referral address validation queries).
In those cases no new validation queries need to be made.</t>

<t>Resolvers may choose to delay the response to a triggering query until it can be verified that the answer came from a name server listening on an authoritatively acquired address for an authoritatively acquired name.
This would offer the most trustworthy responses with the least risk for forgery or eavesdropping.</t>

</section>
<section anchor="revalidation"><name>Delegation Revalidation</name>

<t>The essence of this mechanism is re-validation of all delegation metadata that directly or indirectly supports an owner name in cache.
This requires a cache to remember the delegated name server names for each zone cut as received from the parent (delegating) zone's name servers, and also the TTL of that NS RRset, and the TTL of the associated DS RRset (if seen).</t>

<t>A delegation under re-validation is called a "re-validation point" and is "still valid" if its parent zone's servers still respond to an in-zone question with a referral to the re-validation point, and if that referral overlaps with the previously cached referral by at least one name server name, and the DS RRset (if seen) overlaps the previously cached DS RRset (if also seen) by at least one delegated signer.</t>

<t>If the response is not a referral or refers to a different zone than before, then the shape of the delegation hierarchy has changed.
If the response is a referral to the re-validation point but to a wholly novel NS RRset or a wholly novel DS RRset, then the authority for that zone has changed.
For clarity, this includes transitions between empty and non-empty DS RRsets.</t>

<t>If the shape of the delegation hierarchy or the authority for a zone has been found to change, then no currently cached data whose owner names are at or below that re-validation point can be used.
Such non-use can be by directed garbage collection or lazy generational garbage collection or some other method befitting the architecture of the cache.
What matters is that the cache behave as though this data was removed.</t>

<t>Since re-validation can discover changes in the shape of the delegation hierarchy it is more efficient to re-validate from the top (root) downward (to the owner name) since an upper level re-validation may obviate lower level re-validations.
What matters is that the supporting chain of delegations from the root to the owner name be demonstrably valid; further specifics are implementation details.</t>

<t>Re-validation is triggered when delegation meta-data has been cached for a period at most exceeding the delegating NS or DS (if seen) RRset TTL.
If the corresponding child zone's apex NS RRset TTL is smaller than the delegating NS RRset TTL, revalidation should happen at that interval instead.
However, resolvers should impose a sensitive minimum TTL floor they are willing to endure to avoid potential computational DoS attacks inflicted by zones with very short TTLs.</t>

<t>In normal operations this meta-data can be quickly re-validated with no further work.
However, when re-delegation or take-down occurs, a re-validating cache will discover this within one delegation TTL period, allowing the rapid expulsion of old data from the cache.</t>

</section>
<section anchor="IANA"><name>IANA Considerations</name>

<t>This document includes no request to IANA.</t>

</section>
<section anchor="Security"><name>Security Considerations</name>
<t>In <xref target="DNS-CACHE-INJECTIONS"/> an overview is given of 18 cache poisoning attacks from which 13 can be remedied with delegation revalidation.
The paper provides recommendations for handling records in DNS response with respect to an earlier version of the idea presented in this document<xref target="I-D.wijngaards-dnsext-resolver-side-mitigation"/>.</t>

<t>Referral response NS RRsets and glue, and the additional addresses from authoritative NS RRset responses (such as the root priming response), are not protected with DNSSEC signatures.
An attacker that is able to alter the unsigned A and AAAA RRsets in the additional section of referral and authoritative NS RRset responses, can fool a resolver into taking addresses under the control of the attacker to be authoritative for the zone.
Such an attacker can redirect all traffic to the zone (of the referral or authoritative NS RRset response) to a rogue name server.</t>

<t>A rogue name server can view all queries from the resolver to that zone and alter all unsigned parts of responses, such as the parent side NS RRsets and glue of further referral responses.
Resolvers following referrals from a rogue name server, that do not revalidate those referral responses, can subsequently be fooled into taking addresses under the control of the attacker to be authoritative for those delegations as well.
The higher up the DNS tree, the more impact such an attack has.
In case of non DNSSEC validating resolvers, an attacker controlling a rogue name server for the root has potentially complete control over the entire domain name space and can alter all unsigned parts undetected.</t>

<t>Revalidating referral and authoritative NS RRsets responses enables to defend against the above described attack with DNSSEC signed infrastructure RRsets.
Unlike cache poisoning defences that leverage increase entropy to protect the transaction, revalidation of NS RRsets and addresses also provides protection against on-path attacks.</t>

<t><xref target="upgrade-ns">Upgrading NS RRset Credibility</xref> allows resolvers to cache and utilize the authoritative child apex NS RRset in preference to the non-authoritative parent NS RRset.
However, it is important to implement the steps described in <xref target="revalidation">Delegation Revalidation</xref> at the expiration of the parent's delegating TTL.
Otherwise, the operator of a malicious child zone, originally delegated to, but subsequently delegated away from, can cause resolvers that refresh TTLs on subsequent NS set queries, or that pre-fetch NS queries, to never learn of the redelegated zone.</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">

&RFC1034;
&RFC1035;
&RFC2181;
&RFC8109;


    </references>

    <references title='Informative References' anchor="sec-informative-references">

&I-D.vixie-dnsext-resimprove;
&I-D.wijngaards-dnsext-resolver-side-mitigation;
<reference anchor="GHOST1" target="https://www.ndss-symposium.org/ndss2012/">
  <front>
    <title>Ghost Domain Names: Revoked Yet Still Resolvable</title>
    <author initials="J." surname="Jiang" fullname="J Jiang">
      <organization></organization>
    </author>
    <author initials="J." surname="Liang" fullname="J Liang">
      <organization></organization>
    </author>
    <author initials="K." surname="Li" fullname="K Li">
      <organization></organization>
    </author>
    <author initials="J." surname="Li" fullname="J Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="H Duan">
      <organization></organization>
    </author>
    <author initials="J." surname="Wu" fullname="J Wu">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="GHOST2" target="https://www.ndss-symposium.org/ndss-paper/ghost-domain-reloaded-vulnerable-links-in-domain-name-delegation-and-revocation/">
  <front>
    <title>Ghost Domain Reloaded: Vulnerable Links in Domain Name Delegation and Revocation</title>
    <author initials="X." surname="Li" fullname="Xiang Li">
      <organization></organization>
    </author>
    <author initials="B." surname="Liu" fullname="Baojun Liu">
      <organization></organization>
    </author>
    <author initials="X." surname="Bai" fullname="Xuesong Bai">
      <organization></organization>
    </author>
    <author initials="M." surname="Zhang" fullname="Mingming Zhang">
      <organization></organization>
    </author>
    <author initials="Q." surname="Zhang" fullname="Qifan Zhang">
      <organization></organization>
    </author>
    <author initials="Z." surname="Li" fullname="Zhou Li">
      <organization></organization>
    </author>
    <author initials="H." surname="Duan" fullname="Haixin Duan">
      <organization></organization>
    </author>
    <author initials="Q." surname="Li" fullname="Qi Li">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="DNS-CACHE-INJECTIONS" target="https://ieeexplore.ieee.org/abstract/document/8057202">
  <front>
    <title>Internet-Wide Study of DNS Cache Injections</title>
    <author initials="A." surname="Klein" fullname="Amit Klein">
      <organization></organization>
    </author>
    <author initials="H." surname="Shulman" fullname="Haya Shulman">
      <organization></organization>
    </author>
    <author initials="M." surname="Waidner" fullname="Michael Waidner">
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<?line 274?>

<section anchor="Acknowledgements"><name>Acknowledgements</name>

<t>Wouter Wijngaards proposed explicitly obtaining authoritative child NS data in <xref target="I-D.wijngaards-dnsext-resolver-side-mitigation"/>.
This behavior has been implemented in the Unbound DNS resolver via the "harden-referral-path" option.
The combination of child NS fetch and revalidating the child delegation was originally proposed in <xref target="I-D.vixie-dnsext-resimprove"/>, by Paul Vixie, Rodney Joffe, and Frederico Neves.</t>

<t>The authors would like to thank Ralph Dolmans who was an early collaborator on this work, as well as the many members of the IETF DNS Operations Working Group for helpful comments and discussion.</t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

